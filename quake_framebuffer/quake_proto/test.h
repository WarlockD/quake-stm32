/* cd_null.c */
void CDAudio_Play(byte track, qboolean looping);
void CDAudio_Stop(void);
void CDAudio_Pause(void);
void CDAudio_Resume(void);
void CDAudio_Update(void);
int CDAudio_Init(void);
void CDAudio_Shutdown(void);
/* chase.c */
cvar_t chase_back;
cvar_t chase_up;
cvar_t chase_right;
cvar_t chase_active;
vec3_t chase_pos;
vec3_t chase_angles;
vec3_t chase_dest;
vec3_t chase_dest_angles;
void Chase_Init(void);
void Chase_Reset(void);
void TraceLine(vec3_t start, vec3_t end, vec3_t impact);
void Chase_Update(void);
/* cl_demo.c */
void CL_StopPlayback(void);
void CL_WriteDemoMessage(void);
int CL_GetMessage(void);
void CL_Stop_f(void);
void CL_Record_f(void);
void CL_PlayDemo_f(void);
void CL_FinishTimeDemo(void);
void CL_TimeDemo_f(void);
/* cl_input.c */
kbutton_t in_mlook;
kbutton_t in_klook;
kbutton_t in_left;
kbutton_t in_right;
kbutton_t in_forward;
kbutton_t in_back;
kbutton_t in_lookup;
kbutton_t in_lookdown;
kbutton_t in_moveleft;
kbutton_t in_moveright;
kbutton_t in_strafe;
kbutton_t in_speed;
kbutton_t in_use;
kbutton_t in_jump;
kbutton_t in_attack;
kbutton_t in_up;
kbutton_t in_down;
int in_impulse;
void KeyDown(kbutton_t *b);
void KeyUp(kbutton_t *b);
void IN_KLookDown(void);
void IN_KLookUp(void);
void IN_MLookDown(void);
void IN_MLookUp(void);
void IN_UpDown(void);
void IN_UpUp(void);
void IN_DownDown(void);
void IN_DownUp(void);
void IN_LeftDown(void);
void IN_LeftUp(void);
void IN_RightDown(void);
void IN_RightUp(void);
void IN_ForwardDown(void);
void IN_ForwardUp(void);
void IN_BackDown(void);
void IN_BackUp(void);
void IN_LookupDown(void);
void IN_LookupUp(void);
void IN_LookdownDown(void);
void IN_LookdownUp(void);
void IN_MoveleftDown(void);
void IN_MoveleftUp(void);
void IN_MoverightDown(void);
void IN_MoverightUp(void);
void IN_SpeedDown(void);
void IN_SpeedUp(void);
void IN_StrafeDown(void);
void IN_StrafeUp(void);
void IN_AttackDown(void);
void IN_AttackUp(void);
void IN_UseDown(void);
void IN_UseUp(void);
void IN_JumpDown(void);
void IN_JumpUp(void);
void IN_Impulse(void);
float CL_KeyState(kbutton_t *key);
cvar_t cl_upspeed;
cvar_t cl_forwardspeed;
cvar_t cl_backspeed;
cvar_t cl_sidespeed;
cvar_t cl_movespeedkey;
cvar_t cl_yawspeed;
cvar_t cl_pitchspeed;
cvar_t cl_anglespeedkey;
void CL_AdjustAngles(void);
void CL_BaseMove(usercmd_t *cmd);
void CL_SendMove(usercmd_t *cmd);
void CL_InitInput(void);
/* cl_main.c */
cvar_t cl_name;
cvar_t cl_color;
cvar_t cl_shownet;
cvar_t cl_nolerp;
cvar_t lookspring;
cvar_t lookstrafe;
cvar_t sensitivity;
cvar_t m_pitch;
cvar_t m_yaw;
cvar_t m_forward;
cvar_t m_side;
client_static_t cls;
client_state_t cl;
efrag_t cl_efrags[MAX_EFRAGS];
entity_t cl_entities[MAX_EDICTS];
entity_t cl_static_entities[MAX_STATIC_ENTITIES];
lightstyle_t cl_lightstyle[MAX_LIGHTSTYLES];
dlight_t cl_dlights[MAX_DLIGHTS];
int cl_numvisedicts;
entity_t *cl_visedicts[MAX_VISEDICTS];
void CL_ClearState(void);
void CL_Disconnect(void);
void CL_Disconnect_f(void);
void CL_EstablishConnection(char *host);
void CL_SignonReply(void);
void CL_NextDemo(void);
void CL_PrintEntities_f(void);
void SetPal(int i);
dlight_t *CL_AllocDlight(int key);
void CL_DecayLights(void);
float CL_LerpPoint(void);
void CL_RelinkEntities(void);
int CL_ReadFromServer(void);
void CL_SendCmd(void);
void CL_Init(void);
/* cl_parse.c */
char *svc_strings[];
entity_t *CL_EntityNum(int num);
void CL_ParseStartSoundPacket(void);
void CL_KeepaliveMessage(void);
void CL_ParseServerInfo(void);
int bitcounts[16];
void CL_ParseUpdate(int bits);
void CL_ParseBaseline(entity_t *ent);
void CL_ParseClientdata(int bits);
void CL_NewTranslation(int slot);
void CL_ParseStatic(void);
void CL_ParseStaticSound(void);
void CL_ParseServerMessage(void);
/* cl_tent.c */
int num_temp_entities;
entity_t cl_temp_entities[MAX_TEMP_ENTITIES];
beam_t cl_beams[MAX_BEAMS];
sfx_t *cl_sfx_wizhit;
sfx_t *cl_sfx_knighthit;
sfx_t *cl_sfx_tink1;
sfx_t *cl_sfx_ric1;
sfx_t *cl_sfx_ric2;
sfx_t *cl_sfx_ric3;
sfx_t *cl_sfx_r_exp3;
sfx_t *cl_sfx_imp;
sfx_t *cl_sfx_rail;
void CL_InitTEnts(void);
void CL_ParseBeam(model_t *m);
void CL_ParseTEnt(void);
entity_t *CL_NewTempEntity(void);
void CL_UpdateTEnts(void);
/* cmd.c */
cmdalias_t *cmd_alias;
int trashtest;
int *trashspot;
qboolean cmd_wait;
void Cmd_Wait_f(void);
sizebuf_t cmd_text;
void Cbuf_Init(void);
void Cbuf_AddText(char *text);
void Cbuf_InsertText(char *text);
void Cbuf_Execute(void);
void Cmd_StuffCmds_f(void);
void Cmd_Exec_f(void);
void Cmd_Echo_f(void);
char *CopyString(char *in);
void Cmd_Alias_f(void);
cmd_source_t cmd_source;
void Cmd_Init(void);
int Cmd_Argc(void);
char *Cmd_Argv(int arg);
char *Cmd_Args(void);
void Cmd_TokenizeString(char *text);
void Cmd_AddCommand(char *cmd_name, xcommand_t function);
qboolean Cmd_Exists(char *cmd_name);
char *Cmd_CompleteCommand(char *partial);
void Cmd_ExecuteString(char *text, cmd_source_t src);
void Cmd_ForwardToServer(void);
int Cmd_CheckParm(char *parm);
/* common.c */
cvar_t registered;
cvar_t cmdline;
qboolean com_modified;
qboolean proghack;
int static_registered;
qboolean msg_suppress_1;
char com_token[1024];
int com_argc;
char **com_argv;
char com_cmdline[CMDLINE_LENGTH];
qboolean standard_quake;
qboolean rogue;
qboolean hipnotic;
unsigned short pop[];
void ClearLink(link_t *l);
void RemoveLink(link_t *l);
void InsertLinkBefore(link_t *l, link_t *before);
void InsertLinkAfter(link_t *l, link_t *after);
void Q_memset(void *dest, int fill, int count);
void Q_memcpy(void *dest, void *src, int count);
int Q_memcmp(void *m1, void *m2, int count);
void Q_strcpy(char *dest, char *src);
void Q_strncpy(char *dest, char *src, int count);
int Q_strlen(char *str);
char *Q_strrchr(char *s, char c);
void Q_strcat(char *dest, char *src);
int Q_strcmp(char *s1, char *s2);
int Q_strncmp(char *s1, char *s2, int count);
int Q_strncasecmp(char *s1, char *s2, int n);
int Q_strcasecmp(char *s1, char *s2);
int Q_atoi(char *str);
float Q_atof(char *str);
qboolean bigendien;
short (*BigShort)(short l);
short (*LittleShort)(short l);
int (*BigLong)(int l);
int (*LittleLong)(int l);
float (*BigFloat)(float l);
float (*LittleFloat)(float l);
short ShortSwap(short l);
short ShortNoSwap(short l);
int LongSwap(int l);
int LongNoSwap(int l);
float FloatSwap(float f);
float FloatNoSwap(float f);
void MSG_WriteChar(sizebuf_t *sb, int c);
void MSG_WriteByte(sizebuf_t *sb, int c);
void MSG_WriteShort(sizebuf_t *sb, int c);
void MSG_WriteLong(sizebuf_t *sb, int c);
void MSG_WriteFloat(sizebuf_t *sb, float f);
void MSG_WriteString(sizebuf_t *sb, char *s);
void MSG_WriteCoord(sizebuf_t *sb, float f);
void MSG_WriteAngle(sizebuf_t *sb, float f);
int msg_readcount;
qboolean msg_badread;
void MSG_BeginReading(void);
int MSG_ReadChar(void);
int MSG_ReadByte(void);
int MSG_ReadShort(void);
int MSG_ReadLong(void);
float MSG_ReadFloat(void);
char *MSG_ReadString(void);
float MSG_ReadCoord(void);
float MSG_ReadAngle(void);
void SZ_Alloc(sizebuf_t *buf, int startsize);
void SZ_Free(sizebuf_t *buf);
void SZ_Clear(sizebuf_t *buf);
void *SZ_GetSpace(sizebuf_t *buf, int length);
void SZ_Write(sizebuf_t *buf, void *data, int length);
void SZ_Print(sizebuf_t *buf, char *data);
char *COM_SkipPath(char *pathname);
void COM_StripExtension(char *in, char *out);
char *COM_FileExtension(char *in);
void COM_FileBase(char *in, char *out);
void COM_DefaultExtension(char *path, char *extension);
char *COM_Parse(char *data);
int COM_CheckParm(char *parm);
void COM_CheckRegistered(void);
void COM_InitArgv(int argc, char **argv);
void COM_Init(char *basedir);
char *va(char *format, ...);
int memsearch(byte *start, int count, int search);
int com_filesize;
char com_cachedir[MAX_OSPATH];
char com_gamedir[MAX_OSPATH];
searchpath_t *com_searchpaths;
void COM_Path_f(void);
void COM_WriteFile(char *filename, void *data, int len);
void COM_CreatePath(char *path);
void COM_CopyFile(char *netpath, char *cachepath);
int COM_OpenFile(char *filename, int *handle);
void COM_CloseFile(int h);
cache_user_t *loadcache;
byte *loadbuf;
int loadsize;
byte *COM_LoadFile(char *path, int usehunk);
byte *COM_LoadHunkFile(char *path);
byte *COM_LoadTempFile(char *path);
void COM_LoadCacheFile(char *path, struct cache_user_s *cu);
byte *COM_LoadStackFile(char *path, void *buffer, int bufsize);
pack_t *COM_LoadPackFile(char *packfile);
void COM_AddGameDirectory(char *dir);
void COM_InitFilesystem(void);
/* conproc.c */
void DeinitConProc(void);
int CharToCode(char c);
/* console.c */
int con_linewidth;
float con_cursorspeed;
qboolean con_forcedup;
int con_totallines;
int con_backscroll;
int con_current;
int con_x;
char *con_text;
cvar_t con_notifytime;
float con_times[NUM_CON_TIMES];
int con_vislines;
qboolean con_debuglog;
qboolean con_initialized;
int con_notifylines;
void Con_ToggleConsole_f(void);
void Con_Clear_f(void);
void Con_ClearNotify(void);
void Con_MessageMode_f(void);
void Con_MessageMode2_f(void);
void Con_CheckResize(void);
void Con_Init(void);
void Con_Linefeed(void);
void Con_Print(char *txt);
void Con_DebugLog(char *file, char *fmt, ...);
void Con_Printf(char *fmt, ...);
void Con_DPrintf(char *fmt, ...);
void Con_SafePrintf(char *fmt, ...);
void Con_DrawInput(void);
void Con_DrawNotify(void);
void Con_DrawConsole(int lines, qboolean drawinput);
void Con_NotifyBox(char *text);
/* crc.c */
void CRC_Init(unsigned short *crcvalue);
void CRC_ProcessByte(unsigned short *crcvalue, byte data);
unsigned short CRC_Value(unsigned short crcvalue);
/* cvar.c */
cvar_t *cvar_vars;
char *cvar_null_string;
cvar_t *Cvar_FindVar(char *var_name);
float Cvar_VariableValue(char *var_name);
char *Cvar_VariableString(char *var_name);
char *Cvar_CompleteVariable(char *partial);
void Cvar_Set(char *var_name, char *value);
void Cvar_SetValue(char *var_name, float value);
void Cvar_RegisterVariable(cvar_t *variable);
qboolean Cvar_Command(void);
/* d_edge.c */
fixed16_t sadjust;
fixed16_t tadjust;
fixed16_t bbextents;
fixed16_t bbextentt;
void (*prealspandrawer)(void);
float scale_for_mip;
int screenwidth;
int ubasestep;
int errorterm;
int erroradjustup;
int erroradjustdown;
int vstartscan;
vec3_t transformed_modelorg;
void D_DrawPoly(void);
int D_MipLevelForScale(float scale);
void D_DrawSolidSurface(surf_t *surf, int color);
void D_CalcGradients(msurface_t *pface);
void D_DrawSurfaces(void);
/* d_fill.c */
void D_FillRect(vrect_t *rect, int color);
/* d_init.c */
fixed16_t sadjust;
fixed16_t tadjust;
fixed16_t bbextents;
fixed16_t bbextentt;
void (*prealspandrawer)(void);
cvar_t d_subdiv16;
cvar_t d_mipcap;
cvar_t d_mipscale;
surfcache_t *d_initial_rover;
qboolean d_roverwrapped;
int d_minmip;
float d_scalemip[NUM_MIPS-1];
void (*d_drawspans)(espan_t *pspan);
void D_Init(void);
void D_CopyRects(vrect_t *prects, int transparent);
void D_EnableBackBufferAccess(void);
void D_TurnZOn(void);
void D_DisableBackBufferAccess(void);
void D_SetupFrame(void);
void D_UpdateRects(vrect_t *prect);
/* d_modech.c */
fixed16_t sadjust;
fixed16_t tadjust;
fixed16_t bbextents;
fixed16_t bbextentt;
void (*prealspandrawer)(void);
int d_vrectx;
int d_vrecty;
int d_vrectright_particle;
int d_vrectbottom_particle;
int d_y_aspect_shift;
int d_pix_min;
int d_pix_max;
int d_pix_shift;
int d_scantable[MAXHEIGHT];
short *zspantable[MAXHEIGHT];
void D_Patch(void);
void D_ViewChanged(void);
/* d_part.c */
fixed16_t sadjust;
fixed16_t tadjust;
fixed16_t bbextents;
fixed16_t bbextentt;
void (*prealspandrawer)(void);
void D_EndParticles(void);
void D_StartParticles(void);
void D_DrawParticle(particle_t *pparticle);
/* d_polyse.c */
int r_p0[6];
int r_p1[6];
int r_p2[6];
byte *d_pcolormap;
int d_aflatcolor;
int d_xdenom;
edgetable *pedgetable;
edgetable edgetables[12];
int a_sstepxfrac;
int a_tstepxfrac;
int r_lstepx;
int a_ststepxwhole;
int r_sstepx;
int r_tstepx;
int r_lstepy;
int r_sstepy;
int r_tstepy;
int r_zistepx;
int r_zistepy;
int d_aspancount;
int d_countextrastep;
spanpackage_t *a_spans;
spanpackage_t *d_pedgespanpackage;
byte *d_pdest;
byte *d_ptex;
short *d_pz;
int d_sfrac;
int d_tfrac;
int d_light;
int d_zi;
int d_ptexextrastep;
int d_sfracextrastep;
int d_tfracextrastep;
int d_lightextrastep;
int d_pdestextrastep;
int d_lightbasestep;
int d_pdestbasestep;
int d_ptexbasestep;
int d_sfracbasestep;
int d_tfracbasestep;
int d_ziextrastep;
int d_zibasestep;
int d_pzextrastep;
int d_pzbasestep;
byte *skintable[MAX_LBM_HEIGHT];
int skinwidth;
byte *skinstart;
void D_PolysetDraw(void);
void D_PolysetDrawFinalVerts(finalvert_t *fv, int numverts);
void D_DrawSubdiv(void);
void D_DrawNonSubdiv(void);
void D_PolysetRecursiveTriangle(int *lp1, int *lp2, int *lp3);
void D_PolysetUpdateTables(void);
void D_PolysetScanLeftEdge(int height);
void D_PolysetSetUpForLineScan(fixed8_t startvertu, fixed8_t startvertv, fixed8_t endvertu, fixed8_t endvertv);
void D_PolysetCalcGradients(int skinwidth);
byte gelmap[256];
void InitGel(byte *palette);
void D_PolysetDrawSpans8(spanpackage_t *pspanpackage);
void D_PolysetFillSpans8(spanpackage_t *pspanpackage);
void D_RasterizeAliasPolySmooth(void);
void D_PolysetSetEdgeTable(void);
void D_PolysetRecursiveDrawLine(int *lp1, int *lp2);
void D_PolysetRecursiveTriangle2(int *lp1, int *lp2, int *lp3);
/* d_scan.c */
unsigned char *r_turb_pbase;
unsigned char *r_turb_pdest;
fixed16_t r_turb_s;
fixed16_t r_turb_t;
fixed16_t r_turb_sstep;
fixed16_t r_turb_tstep;
int *r_turb_turb;
int r_turb_spancount;
void D_WarpScreen(void);
void D_DrawTurbulent8Span(void);
void Turbulent8(espan_t *pspan);
void D_DrawSpans8(espan_t *pspan);
void D_DrawZSpans(espan_t *pspan);
/* d_sky.c */
void D_Sky_uv_To_st(int u, int v, fixed16_t *s, fixed16_t *t);
void D_DrawSkyScans8(espan_t *pspan);
/* d_sprite.c */
fixed16_t sadjust;
fixed16_t tadjust;
fixed16_t bbextents;
fixed16_t bbextentt;
void (*prealspandrawer)(void);
void D_SpriteDrawSpans(sspan_t *pspan);
void D_SpriteScanLeftEdge(void);
void D_SpriteScanRightEdge(void);
void D_SpriteCalculateGradients(void);
void D_DrawSprite(void);
/* d_surf.c */
fixed16_t sadjust;
fixed16_t tadjust;
fixed16_t bbextents;
fixed16_t bbextentt;
void (*prealspandrawer)(void);
float surfscale;
qboolean r_cache_thrash;
int sc_size;
surfcache_t *sc_rover;
surfcache_t *sc_base;
int D_SurfaceCacheForRes(int width, int height);
void D_CheckCacheGuard(void);
void D_ClearCacheGuard(void);
void D_InitCaches(void *buffer, int size);
void D_FlushCaches(void);
surfcache_t *D_SCAlloc(int width, int size);
void D_SCDump(void);
int MaskForNum(int num);
int D_log2(int num);
surfcache_t *D_CacheSurface(msurface_t *surface, int miplevel);
/* d_vars.c */
float d_sdivzstepu;
float d_tdivzstepu;
float d_zistepu;
float d_sdivzstepv;
float d_tdivzstepv;
float d_zistepv;
float d_sdivzorigin;
float d_tdivzorigin;
float d_ziorigin;
fixed16_t sadjust;
fixed16_t tadjust;
fixed16_t bbextents;
fixed16_t bbextentt;
pixel_t *cacheblock;
int cachewidth;
pixel_t *d_viewbuffer;
short *d_pzbuffer;
unsigned int d_zrowbytes;
unsigned int d_zwidth;
/* d_zpoint.c */
fixed16_t sadjust;
fixed16_t tadjust;
fixed16_t bbextents;
fixed16_t bbextentt;
void (*prealspandrawer)(void);
void D_DrawZPoint(void);
/* draw.c */
byte *draw_chars;
qpic_t *draw_disc;
qpic_t *draw_backtile;
cachepic_t menu_cachepics[MAX_CACHED_PICS];
int menu_numcachepics;
qpic_t *Draw_PicFromWad(char *name);
qpic_t *Draw_CachePic(char *path);
void Draw_Init(void);
void Draw_Character(int x, int y, int num);
void Draw_String(int x, int y, char *str);
void Draw_DebugChar(char num);
void Draw_Pic(int x, int y, qpic_t *pic);
void Draw_TransPic(int x, int y, qpic_t *pic);
void Draw_TransPicTranslate(int x, int y, qpic_t *pic, byte *translation);
void Draw_CharToConback(int num, byte *dest);
void Draw_ConsoleBackground(int lines);
void R_DrawRect8(vrect_t *prect, int rowbytes, byte *psrc, int transparent);
void R_DrawRect16(vrect_t *prect, int rowbytes, byte *psrc, int transparent);
void Draw_TileClear(int x, int y, int w, int h);
void Draw_Fill(int x, int y, int w, int h, int c);
void Draw_FadeScreen(void);
void Draw_BeginDisc(void);
void Draw_EndDisc(void);
/* gl_draw.c */
cvar_t gl_nobind;
cvar_t gl_max_size;
cvar_t gl_picmip;
byte *draw_chars;
qpic_t *draw_disc;
qpic_t *draw_backtile;
int translate_texture;
int char_texture;
byte conback_buffer[sizeof(qpic_t) + sizeof(glpic_t)];
qpic_t *conback;
int gl_lightmap_format;
int gl_solid_format;
int gl_alpha_format;
int gl_filter_min;
int gl_filter_max;
int texels;
gltexture_t gltextures[MAX_GLTEXTURES];
int numgltextures;
void GL_Bind(int texnum);
int scrap_allocated[MAX_SCRAPS][BLOCK_WIDTH];
byte scrap_texels[MAX_SCRAPS][BLOCK_WIDTH*BLOCK_HEIGHT*4];
qboolean scrap_dirty;
int scrap_texnum;
int Scrap_AllocBlock(int w, int h, int *x, int *y);
int scrap_uploads;
void Scrap_Upload(void);
cachepic_t menu_cachepics[MAX_CACHED_PICS];
int menu_numcachepics;
byte menuplyr_pixels[4096];
int pic_texels;
int pic_count;
qpic_t *Draw_PicFromWad(char *name);
qpic_t *Draw_CachePic(char *path);
void Draw_CharToConback(int num, byte *dest);
glmode_t modes[];
void Draw_TextureMode_f(void);
void Draw_Init(void);
void Draw_Character(int x, int y, int num);
void Draw_String(int x, int y, char *str);
void Draw_DebugChar(char num);
void Draw_AlphaPic(int x, int y, qpic_t *pic, float alpha);
void Draw_Pic(int x, int y, qpic_t *pic);
void Draw_TransPic(int x, int y, qpic_t *pic);
void Draw_TransPicTranslate(int x, int y, qpic_t *pic, byte *translation);
void Draw_ConsoleBackground(int lines);
void Draw_TileClear(int x, int y, int w, int h);
void Draw_Fill(int x, int y, int w, int h, int c);
void Draw_FadeScreen(void);
void Draw_BeginDisc(void);
void Draw_EndDisc(void);
void GL_Set2D(void);
int GL_FindTexture(char *identifier);
void GL_ResampleTexture(unsigned *in, int inwidth, int inheight, unsigned *out, int outwidth, int outheight);
void GL_Resample8BitTexture(unsigned char *in, int inwidth, int inheight, unsigned char *out, int outwidth, int outheight);
void GL_MipMap(byte *in, int width, int height);
void GL_MipMap8Bit(byte *in, int width, int height);
void GL_Upload32(unsigned *data, int width, int height, qboolean mipmap, qboolean alpha);
void GL_Upload8_EXT(byte *data, int width, int height, qboolean mipmap, qboolean alpha);
void GL_Upload8(byte *data, int width, int height, qboolean mipmap, qboolean alpha);
int GL_LoadTexture(char *identifier, int width, int height, byte *data, qboolean mipmap, qboolean alpha);
int GL_LoadPicTexture(qpic_t *pic);
/* gl_mesh.c */
model_t *aliasmodel;
aliashdr_t *paliashdr;
qboolean used[8192];
int commands[8192];
int numcommands;
int vertexorder[8192];
int numorder;
int allverts;
int alltris;
int stripverts[128];
int striptris[128];
int stripcount;
int StripLength(int starttri, int startv);
int FanLength(int starttri, int startv);
void BuildTris(void);
void GL_MakeAliasModelDisplayLists(model_t *m, aliashdr_t *hdr);
/* gl_model.c */
model_t *loadmodel;
char loadname[32];
byte mod_novis[MAX_MAP_LEAFS/8];
model_t mod_known[MAX_MOD_KNOWN];
int mod_numknown;
cvar_t gl_subdivide_size;
void Mod_Init(void);
void *Mod_Extradata(model_t *mod);
mleaf_t *Mod_PointInLeaf(vec3_t p, model_t *model);
byte *Mod_DecompressVis(byte *in, model_t *model);
byte *Mod_LeafPVS(mleaf_t *leaf, model_t *model);
void Mod_ClearAll(void);
model_t *Mod_FindName(char *name);
void Mod_TouchModel(char *name);
model_t *Mod_LoadModel(model_t *mod, qboolean crash);
model_t *Mod_ForName(char *name, qboolean crash);
byte *mod_base;
void Mod_LoadTextures(lump_t *l);
void Mod_LoadLighting(lump_t *l);
void Mod_LoadVisibility(lump_t *l);
void Mod_LoadEntities(lump_t *l);
void Mod_LoadVertexes(lump_t *l);
void Mod_LoadSubmodels(lump_t *l);
void Mod_LoadEdges(lump_t *l);
void Mod_LoadTexinfo(lump_t *l);
void CalcSurfaceExtents(msurface_t *s);
void Mod_LoadFaces(lump_t *l);
void Mod_SetParent(mnode_t *node, mnode_t *parent);
void Mod_LoadNodes(lump_t *l);
void Mod_LoadLeafs(lump_t *l);
void Mod_LoadClipnodes(lump_t *l);
void Mod_MakeHull0(void);
void Mod_LoadMarksurfaces(lump_t *l);
void Mod_LoadSurfedges(lump_t *l);
void Mod_LoadPlanes(lump_t *l);
float RadiusFromBounds(vec3_t mins, vec3_t maxs);
void Mod_LoadBrushModel(model_t *mod, void *buffer);
aliashdr_t *pheader;
stvert_t stverts[MAXALIASVERTS];
mtriangle_t triangles[MAXALIASTRIS];
trivertx_t *poseverts[MAXALIASFRAMES];
int posenum;
byte **player_8bit_texels_tbl;
byte *player_8bit_texels;
void *Mod_LoadAliasFrame(void *pin, maliasframedesc_t *frame);
void *Mod_LoadAliasGroup(void *pin, maliasframedesc_t *frame);
void Mod_FloodFillSkin(byte *skin, int skinwidth, int skinheight);
void *Mod_LoadAllSkins(int numskins, daliasskintype_t *pskintype);
void Mod_LoadAliasModel(model_t *mod, void *buffer);
void *Mod_LoadSpriteFrame(void *pin, mspriteframe_t **ppframe, int framenum);
void *Mod_LoadSpriteGroup(void *pin, mspriteframe_t **ppframe, int framenum);
void Mod_LoadSpriteModel(model_t *mod, void *buffer);
void Mod_Print(void);
/* gl_refrag.c */
mnode_t *r_pefragtopnode;
efrag_t **lastlink;
vec3_t r_emins;
vec3_t r_emaxs;
entity_t *r_addent;
void R_RemoveEfrags(entity_t *ent);
void R_SplitEntityOnNode(mnode_t *node);
void R_AddEfrags(entity_t *ent);
void R_StoreEfrags(efrag_t **ppefrag);
/* gl_rlight.c */
int r_dlightframecount;
void R_AnimateLight(void);
void AddLightBlend(float r, float g, float b, float a2);
void R_RenderDlight(dlight_t *light);
void R_RenderDlights(void);
void R_MarkLights(dlight_t *light, int bit, mnode_t *node);
void R_PushDlights(void);
mplane_t *lightplane;
vec3_t lightspot;
int RecursiveLightPoint(mnode_t *node, vec3_t start, vec3_t end);
int R_LightPoint(vec3_t p);
/* gl_rmain.c */
entity_t r_worldentity;
qboolean r_cache_thrash;
vec3_t modelorg;
vec3_t r_entorigin;
entity_t *currententity;
int r_visframecount;
int r_framecount;
mplane_t frustum[4];
int c_brush_polys;
int c_alias_polys;
qboolean envmap;
int currenttexture;
int cnttextures[2];
int particletexture;
int playertextures;
int mirrortexturenum;
qboolean mirror;
mplane_t *mirror_plane;
vec3_t vup;
vec3_t vpn;
vec3_t vright;
vec3_t r_origin;
float r_world_matrix[16];
float r_base_world_matrix[16];
refdef_t r_refdef;
mleaf_t *r_viewleaf;
mleaf_t *r_oldviewleaf;
texture_t *r_notexture_mip;
int d_lightstylevalue[256];
cvar_t r_norefresh;
cvar_t r_drawentities;
cvar_t r_drawviewmodel;
cvar_t r_speeds;
cvar_t r_fullbright;
cvar_t r_lightmap;
cvar_t r_shadows;
cvar_t r_mirroralpha;
cvar_t r_wateralpha;
cvar_t r_dynamic;
cvar_t r_novis;
cvar_t gl_finish;
cvar_t gl_clear;
cvar_t gl_cull;
cvar_t gl_texsort;
cvar_t gl_smoothmodels;
cvar_t gl_affinemodels;
cvar_t gl_polyblend;
cvar_t gl_flashblend;
cvar_t gl_playermip;
cvar_t gl_nocolors;
cvar_t gl_keeptjunctions;
cvar_t gl_reporttjunctions;
cvar_t gl_doubleeyes;
qboolean R_CullBox(vec3_t mins, vec3_t maxs);
void R_RotateForEntity(entity_t *e);
mspriteframe_t *R_GetSpriteFrame(entity_t *currententity);
void R_DrawSpriteModel(entity_t *e);
float r_avertexnormals[NUMVERTEXNORMALS][3];
vec3_t shadevector;
float shadelight;
float ambientlight;
float r_avertexnormal_dots[SHADEDOT_QUANT][256];
float *shadedots;
int lastposenum;
void GL_DrawAliasFrame(aliashdr_t *paliashdr, int posenum);
void GL_DrawAliasShadow(aliashdr_t *paliashdr, int posenum);
void R_SetupAliasFrame(int frame, aliashdr_t *paliashdr);
void R_DrawAliasModel(entity_t *e);
void R_DrawEntitiesOnList(void);
void R_DrawViewModel(void);
void R_PolyBlend(void);
int SignbitsForPlane(mplane_t *out);
void R_SetFrustum(void);
void R_SetupFrame(void);
void R_SetupGL(void);
void R_RenderScene(void);
void R_Clear(void);
void R_Mirror(void);
void R_RenderView(void);
/* gl_rmisc.c */
void R_InitTextures(void);
byte dottexture[8][8];
void R_InitParticleTexture(void);
void R_Envmap_f(void);
void R_Init(void);
void R_TranslatePlayerSkin(int playernum);
void R_NewMap(void);
void R_TimeRefresh_f(void);
void D_FlushCaches(void);
/* gl_rsurf.c */
int skytexturenum;
int lightmap_bytes;
int lightmap_textures;
unsigned blocklights[18*18];
int active_lightmaps;
glpoly_t *lightmap_polys[MAX_LIGHTMAPS];
qboolean lightmap_modified[MAX_LIGHTMAPS];
glRect_t lightmap_rectchange[MAX_LIGHTMAPS];
int allocated[MAX_LIGHTMAPS][BLOCK_WIDTH];
byte lightmaps[4*MAX_LIGHTMAPS*BLOCK_WIDTH*BLOCK_HEIGHT];
msurface_t *skychain;
msurface_t *waterchain;
void R_AddDynamicLights(msurface_t *surf);
void R_BuildLightMap(msurface_t *surf, byte *dest, int stride);
texture_t *R_TextureAnimation(texture_t *base);
qboolean mtexenabled;
void GL_DisableMultitexture(void);
void GL_EnableMultitexture(void);
void R_DrawSequentialPoly(msurface_t *s);
void R_DrawSequentialPoly(msurface_t *s);
void DrawGLWaterPoly(glpoly_t *p);
void DrawGLWaterPolyLightmap(glpoly_t *p);
void DrawGLPoly(glpoly_t *p);
void R_BlendLightmaps(void);
void R_RenderBrushPoly(msurface_t *fa);
void R_RenderDynamicLightmaps(msurface_t *fa);
void R_MirrorChain(msurface_t *s);
void R_DrawWaterSurfaces(void);
void R_DrawWaterSurfaces(void);
void DrawTextureChains(void);
void R_DrawBrushModel(entity_t *e);
void R_RecursiveWorldNode(mnode_t *node);
void R_DrawWorld(void);
void R_MarkLeaves(void);
int AllocBlock(int w, int h, int *x, int *y);
mvertex_t *r_pcurrentvertbase;
model_t *currentmodel;
int nColinElim;
void BuildSurfaceDisplayList(msurface_t *fa);
void GL_CreateSurfaceLightmap(msurface_t *surf);
void GL_BuildLightmaps(void);
/* gl_screen.c */
int glx;
int gly;
int glwidth;
int glheight;
int scr_copytop;
int scr_copyeverything;
float scr_con_current;
float scr_conlines;
float oldscreensize;
float oldfov;
cvar_t scr_viewsize;
cvar_t scr_fov;
cvar_t scr_conspeed;
cvar_t scr_centertime;
cvar_t scr_showram;
cvar_t scr_showturtle;
cvar_t scr_showpause;
cvar_t scr_printspeed;
cvar_t gl_triplebuffer;
qboolean scr_initialized;
qpic_t *scr_ram;
qpic_t *scr_net;
qpic_t *scr_turtle;
int scr_fullupdate;
int clearconsole;
int clearnotify;
int sb_lines;
viddef_t vid;
vrect_t scr_vrect;
qboolean scr_disabled_for_loading;
qboolean scr_drawloading;
float scr_disabled_time;
qboolean block_drawing;
char scr_centerstring[1024];
float scr_centertime_start;
float scr_centertime_off;
int scr_center_lines;
int scr_erase_lines;
int scr_erase_center;
void SCR_CenterPrint(char *str);
void SCR_DrawCenterString(void);
void SCR_CheckDrawCenterString(void);
float CalcFov(float fov_x, float width, float height);
void SCR_SizeUp_f(void);
void SCR_SizeDown_f(void);
void SCR_Init(void);
void SCR_DrawRam(void);
void SCR_DrawTurtle(void);
void SCR_DrawNet(void);
void SCR_DrawPause(void);
void SCR_DrawLoading(void);
void SCR_SetUpToDrawConsole(void);
void SCR_DrawConsole(void);
void SCR_ScreenShot_f(void);
void SCR_BeginLoadingPlaque(void);
void SCR_EndLoadingPlaque(void);
char *scr_notifystring;
qboolean scr_drawdialog;
void SCR_DrawNotifyString(void);
int SCR_ModalMessage(char *text);
void SCR_BringDownConsole(void);
void SCR_TileClear(void);
void SCR_UpdateScreen(void);
/* gl_test.c */
puff_t puffs[MAX_PUFFS];
void Test_Init(void);
plane_t junk;
plane_t *HitPlane(vec3_t start, vec3_t end);
void Test_Spawn(vec3_t origin);
void DrawPuff(puff_t *p);
void Test_Draw(void);
/* gl_vidlinux.c */
unsigned short d_8to16table[256];
unsigned d_8to24table[256];
unsigned char d_15to8table[65536];
int num_shades;
struct {} mice[];
int num_mice;
int d_con_indirect;
int svgalib_inited;
int UseMouse;
int UseKeyboard;
int mouserate;
cvar_t vid_mode;
cvar_t vid_redrawfull;
cvar_t vid_waitforrefresh;
char *framebuffer_ptr;
cvar_t mouse_button_commands[3];
int mouse_buttons;
int mouse_buttonstate;
int mouse_oldbuttonstate;
float mouse_x;
float mouse_y;
float old_mouse_x;
float old_mouse_y;
int mx;
int my;
cvar_t m_filter;
int scr_width;
int scr_height;
int texture_mode;
int texture_extension_number;
float gldepthmin;
float gldepthmax;
cvar_t gl_ztrick;
const char *gl_vendor;
const char *gl_renderer;
const char *gl_version;
const char *gl_extensions;
void (*qglColorTableEXT)(int, int, int, int, int, const void *);
qboolean is8bit;
qboolean isPermedia;
qboolean gl_mtexable;
void D_BeginDirectRect(int x, int y, byte *pbitmap, int width, int height);
void D_EndDirectRect(int x, int y, int width, int height);
int matchmouse(int mouse, char *name);
void vtswitch(int newconsole);
void keyhandler(int scancode, int state);
void VID_Shutdown(void);
void signal_handler(int sig);
void InitSig(void);
void VID_ShiftPalette(unsigned char *p);
void VID_SetPalette(unsigned char *palette);
void CheckMultiTextureExtensions(void);
void GL_Init(void);
void GL_BeginRendering(int *x, int *y, int *width, int *height);
void GL_EndRendering(void);
void Init_KBD(void);
int findres(int *width, int *height);
qboolean VID_Is8bit(void);
void VID_Init8bitPalette(void);
void VID_Init(unsigned char *palette);
void Sys_SendKeyEvents(void);
void Force_CenterView_f(void);
void mousehandler(int buttonstate, int dx, int dy);
void IN_Init(void);
void IN_Shutdown(void);
void IN_Commands(void);
void IN_MouseMove(usercmd_t *cmd);
void IN_Move(usercmd_t *cmd);
/* gl_vidlinuxglx.c */
unsigned short d_8to16table[256];
unsigned d_8to24table[256];
unsigned char d_15to8table[65536];
cvar_t vid_mode;
qboolean dgamouse;
qboolean vidmode_ext;
int texture_mode;
int texture_extension_number;
float gldepthmin;
float gldepthmax;
cvar_t gl_ztrick;
const char *gl_vendor;
const char *gl_renderer;
const char *gl_version;
const char *gl_extensions;
void (*qglColorTableEXT)(int, int, int, int, int, const void *);
qboolean is8bit;
qboolean isPermedia;
qboolean gl_mtexable;
void D_BeginDirectRect(int x, int y, byte *pbitmap, int width, int height);
void D_EndDirectRect(int x, int y, int width, int height);
void VID_Shutdown(void);
void signal_handler(int sig);
void InitSig(void);
void VID_ShiftPalette(unsigned char *p);
void VID_SetPalette(unsigned char *palette);
void CheckMultiTextureExtensions(void);
void GL_Init(void);
void GL_BeginRendering(int *x, int *y, int *width, int *height);
void GL_EndRendering(void);
qboolean VID_Is8bit(void);
void VID_Init8bitPalette(void);
void VID_Init(unsigned char *palette);
void Sys_SendKeyEvents(void);
void Force_CenterView_f(void);
void IN_Init(void);
void IN_Shutdown(void);
void IN_Commands(void);
void IN_MouseMove(usercmd_t *cmd);
void IN_Move(usercmd_t *cmd);
/* gl_vidnt.c */
lmode_t lowresmodes[];
const char *gl_vendor;
const char *gl_renderer;
const char *gl_version;
const char *gl_extensions;
qboolean DDActive;
qboolean scr_skipupdate;
int DIBWidth;
int DIBHeight;
int vid_modenum;
int vid_realmode;
int vid_default;
unsigned char vid_curpal[256*3];
glvert_t glv;
cvar_t gl_ztrick;
viddef_t vid;
unsigned short d_8to16table[256];
unsigned d_8to24table[256];
unsigned char d_15to8table[65536];
float gldepthmin;
float gldepthmax;
modestate_t modestate;
qboolean is8bit;
qboolean isPermedia;
qboolean gl_mtexable;
cvar_t vid_mode;
cvar_t _vid_default_mode;
cvar_t _vid_default_mode_win;
cvar_t vid_wait;
cvar_t vid_nopageflip;
cvar_t _vid_wait_override;
cvar_t vid_config_x;
cvar_t vid_config_y;
cvar_t vid_stretch_by_2;
cvar_t _windowed_mouse;
int window_center_x;
int window_center_y;
int window_x;
int window_y;
int window_width;
int window_height;
void VID_HandlePause(qboolean pause);
void VID_ForceLockState(int lk);
int VID_ForceUnlockedAndReturnState(void);
void D_BeginDirectRect(int x, int y, byte *pbitmap, int width, int height);
void D_EndDirectRect(int x, int y, int width, int height);
qboolean VID_SetWindowedMode(int modenum);
qboolean VID_SetFullDIBMode(int modenum);
int VID_SetMode(int modenum, unsigned char *palette);
void VID_UpdateWindowStatus(void);
void CheckTextureExtensions(void);
void CheckArrayExtensions(void);
int texture_mode;
int texture_extension_number;
void CheckMultiTextureExtensions(void);
void CheckMultiTextureExtensions(void);
void GL_Init(void);
void GL_BeginRendering(int *x, int *y, int *width, int *height);
void GL_EndRendering(void);
void VID_SetPalette(unsigned char *palette);
void VID_ShiftPalette(unsigned char *palette);
void VID_SetDefaultMode(void);
void VID_Shutdown(void);
byte scantokey[128];
byte shiftscantokey[128];
int MapKey(int key);
void ClearAllStates(void);
int VID_NumModes(void);
vmode_t *VID_GetModePtr(int modenum);
char *VID_GetModeDescription(int mode);
char *VID_GetExtModeDescription(int mode);
void VID_DescribeCurrentMode_f(void);
void VID_NumModes_f(void);
void VID_DescribeMode_f(void);
void VID_DescribeModes_f(void);
qboolean VID_Is8bit(void);
void VID_Init8bitPalette(void);
void VID_Init(unsigned char *palette);
void VID_MenuDraw(void);
void VID_MenuKey(int key);
/* gl_warp.c */
int skytexturenum;
int solidskytexture;
int alphaskytexture;
float speedscale;
msurface_t *warpface;
void BoundPoly(int numverts, float *verts, vec3_t mins, vec3_t maxs);
void SubdividePolygon(int numverts, float *verts);
void GL_SubdivideSurface(msurface_t *fa);
float turbsin[];
void EmitWaterPolys(msurface_t *fa);
void EmitSkyPolys(msurface_t *fa);
void EmitBothSkyLayers(msurface_t *fa);
void R_DrawSkyChain(msurface_t *s);
byte *pcx_rgb;
TargaHeader targa_header;
byte *targa_rgba;
char *suf[6];
void R_LoadSkys(void);
vec3_t skyclip[6];
int c_sky;
int st_to_vec[6][3];
int vec_to_st[6][3];
float skymins[2][6];
float skymaxs[2][6];
void DrawSkyPolygon(int nump, vec3_t vecs);
void ClipSkyPolygon(int nump, vec3_t vecs, int stage);
void R_DrawSkyChain(msurface_t *s);
void R_ClearSkyBox(void);
void MakeSkyVec(float s, float t, int axis);
int skytexorder[6];
void R_DrawSkyBox(void);
void R_InitSky(texture_t *mt);
/* host.c */
quakeparms_t host_parms;
qboolean host_initialized;
double host_frametime;
double host_time;
double realtime;
double oldrealtime;
int host_framecount;
int host_hunklevel;
int minimum_memory;
client_t *host_client;
byte *host_basepal;
byte *host_colormap;
cvar_t host_framerate;
cvar_t host_speeds;
cvar_t sys_ticrate;
cvar_t serverprofile;
cvar_t fraglimit;
cvar_t timelimit;
cvar_t teamplay;
cvar_t samelevel;
cvar_t noexit;
cvar_t developer;
cvar_t developer;
cvar_t skill;
cvar_t deathmatch;
cvar_t coop;
cvar_t pausable;
cvar_t temp1;
void Host_EndGame(char *message, ...);
void Host_Error(char *error, ...);
void Host_FindMaxClients(void);
void Host_InitLocal(void);
void Host_WriteConfiguration(void);
void SV_ClientPrintf(char *fmt, ...);
void SV_BroadcastPrintf(char *fmt, ...);
void Host_ClientCommands(char *fmt, ...);
void SV_DropClient(qboolean crash);
void Host_ShutdownServer(qboolean crash);
void Host_ClearMemory(void);
qboolean Host_FilterTime(float time);
void Host_GetConsoleCommands(void);
void _Host_ServerFrame(void);
void Host_ServerFrame(void);
void Host_ServerFrame(void);
void _Host_Frame(float time);
void Host_Frame(float time);
void Host_InitVCR(quakeparms_t *parms);
void Host_Init(quakeparms_t *parms);
void Host_Shutdown(void);
/* host_cmd.c */
int current_skill;
void Host_Quit_f(void);
void Host_Status_f(void);
void Host_God_f(void);
void Host_Notarget_f(void);
qboolean noclip_anglehack;
void Host_Noclip_f(void);
void Host_Fly_f(void);
void Host_Ping_f(void);
void Host_Map_f(void);
void Host_Changelevel_f(void);
void Host_Restart_f(void);
void Host_Reconnect_f(void);
void Host_Connect_f(void);
void Host_SavegameComment(char *text);
void Host_Savegame_f(void);
void Host_Loadgame_f(void);
void SaveGamestate(void);
int LoadGamestate(char *level, char *startspot);
void Host_Changelevel2_f(void);
void Host_Name_f(void);
void Host_Version_f(void);
void Host_Please_f(void);
void Host_Say(qboolean teamonly);
void Host_Say_f(void);
void Host_Say_Team_f(void);
void Host_Tell_f(void);
void Host_Color_f(void);
void Host_Kill_f(void);
void Host_Pause_f(void);
void Host_PreSpawn_f(void);
void Host_Spawn_f(void);
void Host_Begin_f(void);
void Host_Kick_f(void);
void Host_Give_f(void);
edict_t *FindViewthing(void);
void Host_Viewmodel_f(void);
void Host_Viewframe_f(void);
void PrintFrameName(model_t *m, int frame);
void Host_Viewnext_f(void);
void Host_Viewprev_f(void);
void Host_Startdemos_f(void);
void Host_Demos_f(void);
void Host_Stopdemo_f(void);
void Host_InitCommands(void);
/* in_null.c */
int MapKey(int key);
void IN_Init(void);
void IN_Shutdown(void);
void IN_Commands(void);
void IN_Move(usercmd_t *cmd);
void IN_ModeChanged(void);
/* keys.c */
char key_lines[32][MAXCMDLINE];
int key_linepos;
int shift_down;
int key_lastpress;
int edit_line;
int history_line;
keydest_t key_dest;
int key_count;
char *keybindings[256];
qboolean consolekeys[256];
qboolean menubound[256];
int keyshift[256];
int key_repeats[256];
qboolean keydown[256];
keyname_t keynames[];
void Key_Console(int key);
char chat_buffer[32];
qboolean team_message;
void Key_Message(int key);
int Key_StringToKeynum(char *str);
char *Key_KeynumToString(int keynum);
void Key_SetBinding(int keynum, char *binding);
void Key_Unbind_f(void);
void Key_Unbindall_f(void);
void Key_Bind_f(void);
void Key_Init(void);
void Key_Event(int key, qboolean down);
void Key_ClearStates(void);
/* mathlib.c */
vec3_t vec3_origin;
int nanmask;
void ProjectPointOnPlane(vec3_t dst, const vec3_t p, const vec3_t normal);
void PerpendicularVector(vec3_t dst, const vec3_t src);
void RotatePointAroundVector(vec3_t dst, const vec3_t dir, const vec3_t point, float degrees);
float anglemod(float a);
void BOPS_Error(void);
int BoxOnPlaneSide(vec3_t emins, vec3_t emaxs, mplane_t *p);
void AngleVectors(vec3_t angles, vec3_t forward, vec3_t right, vec3_t up);
int VectorCompare(vec3_t v1, vec3_t v2);
void VectorMA(vec3_t veca, float scale, vec3_t vecb, vec3_t vecc);
vec_t _DotProduct(vec3_t v1, vec3_t v2);
void _VectorSubtract(vec3_t veca, vec3_t vecb, vec3_t out);
void _VectorAdd(vec3_t veca, vec3_t vecb, vec3_t out);
void _VectorCopy(vec3_t in, vec3_t out);
void CrossProduct(vec3_t v1, vec3_t v2, vec3_t cross);
vec_t Length(vec3_t v);
float VectorNormalize(vec3_t v);
void VectorInverse(vec3_t v);
void VectorScale(vec3_t in, vec_t scale, vec3_t out);
int Q_log2(int val);
void R_ConcatRotations(float in1[3][3], float in2[3][3], float out[3][3]);
void R_ConcatTransforms(float in1[3][4], float in2[3][4], float out[3][4]);
void FloorDivMod(double numer, double denom, int *quotient, int *rem);
int GreatestCommonDivisor(int i1, int i2);
fixed16_t Invert24To16(fixed16_t val);
/* menu.c */
void (*vid_menudrawfn)(void);
void (*vid_menukeyfn)(int key);
enum {} m_state;
qboolean m_entersound;
qboolean m_recursiveDraw;
int m_return_state;
qboolean m_return_onerror;
char m_return_reason[32];
void M_DrawCharacter(int cx, int line, int num);
void M_Print(int cx, int cy, char *str);
void M_PrintWhite(int cx, int cy, char *str);
void M_DrawTransPic(int x, int y, qpic_t *pic);
void M_DrawPic(int x, int y, qpic_t *pic);
byte identityTable[256];
byte translationTable[256];
void M_BuildTranslationTable(int top, int bottom);
void M_DrawTransPicTranslate(int x, int y, qpic_t *pic);
void M_DrawTextBox(int x, int y, int width, int lines);
int m_save_demonum;
void M_ToggleMenu_f(void);
int m_main_cursor;
void M_Menu_Main_f(void);
void M_Main_Draw(void);
void M_Main_Key(int key);
int m_singleplayer_cursor;
void M_Menu_SinglePlayer_f(void);
void M_SinglePlayer_Draw(void);
void M_SinglePlayer_Key(int key);
int load_cursor;
char m_filenames[MAX_SAVEGAMES][SAVEGAME_COMMENT_LENGTH+1];
int loadable[MAX_SAVEGAMES];
void M_ScanSaves(void);
void M_Menu_Load_f(void);
void M_Menu_Save_f(void);
void M_Load_Draw(void);
void M_Save_Draw(void);
void M_Load_Key(int k);
void M_Save_Key(int k);
int m_multiplayer_cursor;
void M_Menu_MultiPlayer_f(void);
void M_MultiPlayer_Draw(void);
void M_MultiPlayer_Key(int key);
int setup_cursor;
int setup_cursor_table[];
char setup_hostname[16];
char setup_myname[16];
int setup_oldtop;
int setup_oldbottom;
int setup_top;
int setup_bottom;
void M_Menu_Setup_f(void);
void M_Setup_Draw(void);
void M_Setup_Key(int k);
int m_net_cursor;
int m_net_items;
int m_net_saveHeight;
char *net_helpMessage[];
void M_Menu_Net_f(void);
void M_Net_Draw(void);
void M_Net_Key(int k);
int options_cursor;
void M_Menu_Options_f(void);
void M_AdjustSliders(int dir);
void M_DrawSlider(int x, int y, float range);
void M_DrawCheckbox(int x, int y, int on);
void M_Options_Draw(void);
void M_Options_Key(int k);
char *bindnames[][2];
int keys_cursor;
int bind_grab;
void M_Menu_Keys_f(void);
void M_FindKeysForCommand(char *command, int *twokeys);
void M_UnbindCommand(char *command);
void M_Keys_Draw(void);
void M_Keys_Key(int k);
void M_Menu_Video_f(void);
void M_Video_Draw(void);
void M_Video_Key(int key);
int help_page;
void M_Menu_Help_f(void);
void M_Help_Draw(void);
void M_Help_Key(int key);
int msgNumber;
int m_quit_prevstate;
qboolean wasInMenus;
char *quitMessage[];
void M_Menu_Quit_f(void);
void M_Quit_Key(int key);
void M_Quit_Draw(void);
int serialConfig_cursor;
int serialConfig_cursor_table[];
int serialConfig_baudrate[];
int serialConfig_comport;
int serialConfig_irq;
int serialConfig_baud;
char serialConfig_phone[16];
void M_Menu_SerialConfig_f(void);
void M_SerialConfig_Draw(void);
void M_SerialConfig_Key(int key);
int modemConfig_cursor;
int modemConfig_cursor_table[];
char modemConfig_dialing;
char modemConfig_clear[16];
char modemConfig_init[32];
char modemConfig_hangup[16];
void M_Menu_ModemConfig_f(void);
void M_ModemConfig_Draw(void);
void M_ModemConfig_Key(int key);
int lanConfig_cursor;
int lanConfig_cursor_table[];
int lanConfig_port;
char lanConfig_portname[6];
char lanConfig_joinname[22];
void M_Menu_LanConfig_f(void);
void M_LanConfig_Draw(void);
void M_LanConfig_Key(int key);
level_t levels[];
level_t hipnoticlevels[];
level_t roguelevels[];
episode_t episodes[];
episode_t hipnoticepisodes[];
episode_t rogueepisodes[];
int startepisode;
int startlevel;
int maxplayers;
qboolean m_serverInfoMessage;
double m_serverInfoMessageTime;
void M_Menu_GameOptions_f(void);
int gameoptions_cursor_table[];
int gameoptions_cursor;
void M_GameOptions_Draw(void);
void M_NetStart_Change(int dir);
void M_GameOptions_Key(int key);
qboolean searchComplete;
double searchCompleteTime;
void M_Menu_Search_f(void);
void M_Search_Draw(void);
void M_Search_Key(int key);
int slist_cursor;
qboolean slist_sorted;
void M_Menu_ServerList_f(void);
void M_ServerList_Draw(void);
void M_ServerList_Key(int k);
void M_Init(void);
void M_Draw(void);
void M_Keydown(int key);
void M_ConfigureNetSubsystem(void);
/* model.c */
model_t *loadmodel;
char loadname[32];
byte mod_novis[MAX_MAP_LEAFS/8];
model_t mod_known[MAX_MOD_KNOWN];
int mod_numknown;
void Mod_Init(void);
void *Mod_Extradata(model_t *mod);
mleaf_t *Mod_PointInLeaf(vec3_t p, model_t *model);
byte *Mod_DecompressVis(byte *in, model_t *model);
byte *Mod_LeafPVS(mleaf_t *leaf, model_t *model);
void Mod_ClearAll(void);
model_t *Mod_FindName(char *name);
void Mod_TouchModel(char *name);
model_t *Mod_LoadModel(model_t *mod, qboolean crash);
model_t *Mod_ForName(char *name, qboolean crash);
byte *mod_base;
void Mod_LoadTextures(lump_t *l);
void Mod_LoadLighting(lump_t *l);
void Mod_LoadVisibility(lump_t *l);
void Mod_LoadEntities(lump_t *l);
void Mod_LoadVertexes(lump_t *l);
void Mod_LoadSubmodels(lump_t *l);
void Mod_LoadEdges(lump_t *l);
void Mod_LoadTexinfo(lump_t *l);
void CalcSurfaceExtents(msurface_t *s);
void Mod_LoadFaces(lump_t *l);
void Mod_SetParent(mnode_t *node, mnode_t *parent);
void Mod_LoadNodes(lump_t *l);
void Mod_LoadLeafs(lump_t *l);
void Mod_LoadClipnodes(lump_t *l);
void Mod_MakeHull0(void);
void Mod_LoadMarksurfaces(lump_t *l);
void Mod_LoadSurfedges(lump_t *l);
void Mod_LoadPlanes(lump_t *l);
float RadiusFromBounds(vec3_t mins, vec3_t maxs);
void Mod_LoadBrushModel(model_t *mod, void *buffer);
void *Mod_LoadAliasFrame(void *pin, int *pframeindex, int numv, trivertx_t *pbboxmin, trivertx_t *pbboxmax, aliashdr_t *pheader, char *name);
void *Mod_LoadAliasGroup(void *pin, int *pframeindex, int numv, trivertx_t *pbboxmin, trivertx_t *pbboxmax, aliashdr_t *pheader, char *name);
void *Mod_LoadAliasSkin(void *pin, int *pskinindex, int skinsize, aliashdr_t *pheader);
void *Mod_LoadAliasSkinGroup(void *pin, int *pskinindex, int skinsize, aliashdr_t *pheader);
void Mod_LoadAliasModel(model_t *mod, void *buffer);
void *Mod_LoadSpriteFrame(void *pin, mspriteframe_t **ppframe);
void *Mod_LoadSpriteGroup(void *pin, mspriteframe_t **ppframe);
void Mod_LoadSpriteModel(model_t *mod, void *buffer);
void Mod_Print(void);
/* net_loop.c */
qboolean localconnectpending;
qsocket_t *loop_client;
qsocket_t *loop_server;
int Loop_Init(void);
void Loop_Shutdown(void);
void Loop_Listen(qboolean state);
void Loop_SearchForHosts(qboolean xmit);
qsocket_t *Loop_Connect(char *host);
qsocket_t *Loop_CheckNewConnections(void);
int Loop_GetMessage(qsocket_t *sock);
int Loop_SendMessage(qsocket_t *sock, sizebuf_t *data);
int Loop_SendUnreliableMessage(qsocket_t *sock, sizebuf_t *data);
qboolean Loop_CanSendMessage(qsocket_t *sock);
qboolean Loop_CanSendUnreliableMessage(qsocket_t *sock);
void Loop_Close(qsocket_t *sock);
/* net_main.c */
qsocket_t *net_activeSockets;
qsocket_t *net_freeSockets;
int net_numsockets;
qboolean serialAvailable;
qboolean ipxAvailable;
qboolean tcpipAvailable;
int net_hostport;
int DEFAULTnet_hostport;
char my_ipx_address[NET_NAMELEN];
char my_tcpip_address[NET_NAMELEN];
void (*GetComPortConfig)(int portNumber, int *port, int *irq, int *baud, qboolean *useModem);
void (*SetComPortConfig)(int portNumber, int port, int irq, int baud, qboolean useModem);
void (*GetModemConfig)(int portNumber, char *dialType, char *clear, char *init, char *hangup);
void (*SetModemConfig)(int portNumber, char *dialType, char *clear, char *init, char *hangup);
qboolean slistInProgress;
qboolean slistSilent;
qboolean slistLocal;
PollProcedure slistSendProcedure;
PollProcedure slistPollProcedure;
sizebuf_t net_message;
int net_activeconnections;
int messagesSent;
int messagesReceived;
int unreliableMessagesSent;
int unreliableMessagesReceived;
cvar_t net_messagetimeout;
cvar_t hostname;
qboolean configRestored;
cvar_t config_com_port;
cvar_t config_com_irq;
cvar_t config_com_baud;
cvar_t config_com_modem;
cvar_t config_modem_dialtype;
cvar_t config_modem_clear;
cvar_t config_modem_init;
cvar_t config_modem_hangup;
cvar_t idgods;
int vcrFile;
qboolean recording;
int net_driverlevel;
double net_time;
double SetNetTime(void);
qsocket_t *NET_NewQSocket(void);
void NET_FreeQSocket(qsocket_t *sock);
void NET_Slist_f(void);
int hostCacheCount;
hostcache_t hostcache[HOSTCACHESIZE];
qsocket_t *NET_Connect(char *host);
struct {} vcrConnect;
qsocket_t *NET_CheckNewConnections(void);
void NET_Close(qsocket_t *sock);
struct {} vcrGetMessage;
int NET_GetMessage(qsocket_t *sock);
struct {} vcrSendMessage;
int NET_SendMessage(qsocket_t *sock, sizebuf_t *data);
int NET_SendUnreliableMessage(qsocket_t *sock, sizebuf_t *data);
qboolean NET_CanSendMessage(qsocket_t *sock);
int NET_SendToAll(sizebuf_t *data, int blocktime);
void NET_Init(void);
void NET_Shutdown(void);
void NET_Poll(void);
void SchedulePollProcedure(PollProcedure *proc, double timeOffset);
qboolean IsID(struct qsockaddr *addr);
/* net_none.c */
net_driver_t net_drivers[MAX_NET_DRIVERS];
int net_numdrivers;
net_landriver_t net_landrivers[MAX_NET_DRIVERS];
int net_numlandrivers;
/* net_vcr.c */
int VCR_Init(void);
void VCR_ReadNext(void);
void VCR_Listen(qboolean state);
void VCR_Shutdown(void);
int VCR_GetMessage(qsocket_t *sock);
int VCR_SendMessage(qsocket_t *sock, sizebuf_t *data);
qboolean VCR_CanSendMessage(qsocket_t *sock);
void VCR_Close(qsocket_t *sock);
void VCR_SearchForHosts(qboolean xmit);
qsocket_t *VCR_Connect(char *host);
qsocket_t *VCR_CheckNewConnections(void);
/* nonintel.c */
void R_Surf8Patch(void);
void R_Surf16Patch(void);
void R_SurfacePatch(void);
/* pr_cmds.c */
char *PF_VarString(int first);
void PF_error(void);
void PF_objerror(void);
void PF_makevectors(void);
void PF_setorigin(void);
void SetMinMaxSize(edict_t *e, float *min, float *max, qboolean rotate);
void PF_setsize(void);
void PF_setmodel(void);
void PF_bprint(void);
void PF_sprint(void);
void PF_centerprint(void);
void PF_normalize(void);
void PF_vlen(void);
void PF_vectoyaw(void);
void PF_vectoangles(void);
void PF_random(void);
void PF_particle(void);
void PF_ambientsound(void);
void PF_sound(void);
void PF_break(void);
void PF_traceline(void);
void PF_TraceToss(void);
void PF_checkpos(void);
byte checkpvs[MAX_MAP_LEAFS/8];
int PF_newcheckclient(int check);
int c_invis;
int c_notvis;
void PF_checkclient(void);
void PF_stuffcmd(void);
void PF_localcmd(void);
void PF_cvar(void);
void PF_cvar_set(void);
void PF_findradius(void);
void PF_dprint(void);
char pr_string_temp[128];
void PF_ftos(void);
void PF_fabs(void);
void PF_vtos(void);
void PF_etos(void);
void PF_Spawn(void);
void PF_Remove(void);
void PF_Find(void);
void PR_CheckEmptyString(char *s);
void PF_precache_file(void);
void PF_precache_sound(void);
void PF_precache_model(void);
void PF_coredump(void);
void PF_traceon(void);
void PF_traceoff(void);
void PF_eprint(void);
void PF_walkmove(void);
void PF_droptofloor(void);
void PF_lightstyle(void);
void PF_rint(void);
void PF_floor(void);
void PF_ceil(void);
void PF_checkbottom(void);
void PF_pointcontents(void);
void PF_nextent(void);
cvar_t sv_aim;
void PF_aim(void);
void PF_changeyaw(void);
void PF_changepitch(void);
sizebuf_t *WriteDest(void);
void PF_WriteByte(void);
void PF_WriteChar(void);
void PF_WriteShort(void);
void PF_WriteLong(void);
void PF_WriteAngle(void);
void PF_WriteCoord(void);
void PF_WriteString(void);
void PF_WriteEntity(void);
void PF_makestatic(void);
void PF_setspawnparms(void);
void PF_changelevel(void);
void PF_WaterMove(void);
void PF_sin(void);
void PF_cos(void);
void PF_sqrt(void);
void PF_Fixme(void);
builtin_t pr_builtin[];
builtin_t *pr_builtins;
int pr_numbuiltins;
/* pr_edict.c */
dprograms_t *progs;
dfunction_t *pr_functions;
char *pr_strings;
ddef_t *pr_fielddefs;
ddef_t *pr_globaldefs;
dstatement_t *pr_statements;
float *pr_globals;
int pr_edict_size;
unsigned short pr_crc;
int type_size[8];
cvar_t nomonsters;
cvar_t gamecfg;
cvar_t scratch1;
cvar_t scratch2;
cvar_t scratch3;
cvar_t scratch4;
cvar_t savedgamecfg;
cvar_t saved1;
cvar_t saved2;
cvar_t saved3;
cvar_t saved4;
void ED_ClearEdict(edict_t *e);
edict_t *ED_Alloc(void);
void ED_Free(edict_t *ed);
ddef_t *ED_GlobalAtOfs(int ofs);
ddef_t *ED_FieldAtOfs(int ofs);
ddef_t *ED_FindField(char *name);
ddef_t *ED_FindGlobal(char *name);
dfunction_t *ED_FindFunction(char *name);
eval_t *GetEdictFieldValue(edict_t *ed, char *field);
char *PR_ValueString(etype_t type, eval_t *val);
char *PR_UglyValueString(etype_t type, eval_t *val);
char *PR_GlobalString(int ofs);
char *PR_GlobalStringNoContents(int ofs);
void ED_Print(edict_t *ed);
void ED_PrintNum(int ent);
void ED_PrintEdicts(void);
void ED_PrintEdict_f(void);
void ED_Count(void);
void ED_ParseGlobals(char *data);
char *ED_NewString(char *string);
qboolean ED_ParseEpair(void *base, ddef_t *key, char *s);
char *ED_ParseEdict(char *data, edict_t *ent);
void ED_LoadFromFile(char *data);
void PR_LoadProgs(void);
void PR_Init(void);
edict_t *EDICT_NUM(int n);
int NUM_FOR_EDICT(edict_t *e);
/* pr_exec.c */
prstack_t pr_stack[MAX_STACK_DEPTH];
int pr_depth;
int localstack[LOCALSTACK_SIZE];
int localstack_used;
qboolean pr_trace;
dfunction_t *pr_xfunction;
int pr_xstatement;
int pr_argc;
char *pr_opnames[];
void PR_PrintStatement(dstatement_t *s);
void PR_StackTrace(void);
void PR_Profile_f(void);
void PR_RunError(char *error, ...);
int PR_EnterFunction(dfunction_t *f);
int PR_LeaveFunction(void);
void PR_ExecuteProgram(func_t fnum);
/* r_aclip.c */
void R_Alias_clip_z(finalvert_t *pfv0, finalvert_t *pfv1, finalvert_t *out);
void R_Alias_clip_left(finalvert_t *pfv0, finalvert_t *pfv1, finalvert_t *out);
void R_Alias_clip_right(finalvert_t *pfv0, finalvert_t *pfv1, finalvert_t *out);
void R_Alias_clip_top(finalvert_t *pfv0, finalvert_t *pfv1, finalvert_t *out);
void R_Alias_clip_bottom(finalvert_t *pfv0, finalvert_t *pfv1, finalvert_t *out);
int R_AliasClip(finalvert_t *in, finalvert_t *out, int flag, int count, void (*clip)(finalvert_t *pfv0, finalvert_t *pfv1, finalvert_t *out));
void R_AliasClipTriangle(mtriangle_t *ptri);
/* r_alias.c */
mtriangle_t *ptriangles;
affinetridesc_t r_affinetridesc;
void *acolormap;
trivertx_t *r_apverts;
mdl_t *pmdl;
vec3_t r_plightvec;
int r_ambientlight;
float r_shadelight;
aliashdr_t *paliashdr;
finalvert_t *pfinalverts;
auxvert_t *pauxverts;
int r_amodels_drawn;
int a_skinwidth;
int r_anumverts;
float aliastransform[3][4];
float r_avertexnormals[NUMVERTEXNORMALS][3];
qboolean R_AliasCheckBBox(void);
void R_AliasTransformVector(vec3_t in, vec3_t out);
void R_AliasPreparePoints(void);
void R_AliasSetUpTransform(int trivial_accept);
void R_AliasTransformFinalVert(finalvert_t *fv, auxvert_t *av, trivertx_t *pverts, stvert_t *pstverts);
void R_AliasTransformAndProjectFinalVerts(finalvert_t *fv, stvert_t *pstverts);
void R_AliasProjectFinalVert(finalvert_t *fv, auxvert_t *av);
void R_AliasPrepareUnclippedPoints(void);
void R_AliasSetupSkin(void);
void R_AliasSetupLighting(alight_t *plighting);
void R_AliasSetupFrame(void);
void R_AliasDrawModel(alight_t *plighting);
/* r_bsp.c */
qboolean insubmodel;
entity_t *currententity;
vec3_t modelorg;
vec3_t base_modelorg;
vec3_t r_entorigin;
float entity_rotation[3][3];
vec3_t r_worldmodelorg;
int r_currentbkey;
void R_EntityRotate(vec3_t vec);
void R_RotateBmodel(void);
void R_RecursiveClipBPoly(bedge_t *pedges, mnode_t *pnode, msurface_t *psurf);
void R_DrawSolidClippedSubmodelPolygons(model_t *pmodel);
void R_DrawSubmodelPolygons(model_t *pmodel, int clipflags);
void R_RecursiveWorldNode(mnode_t *node, int clipflags);
void R_RenderWorld(void);
/* r_draw.c */
unsigned int cacheoffset;
int c_faceclip;
zpointdesc_t r_zpointdesc;
polydesc_t r_polydesc;
clipplane_t *entity_clipplanes;
clipplane_t view_clipplanes[4];
clipplane_t world_clipplanes[16];
medge_t *r_pedge;
qboolean r_leftclipped;
qboolean r_rightclipped;
qboolean r_nearzionly;
int sintable[SIN_BUFFER_SIZE];
int intsintable[SIN_BUFFER_SIZE];
mvertex_t r_leftenter;
mvertex_t r_leftexit;
mvertex_t r_rightenter;
mvertex_t r_rightexit;
int r_emitted;
float r_nearzi;
float r_u1;
float r_v1;
float r_lzi1;
int r_ceilv1;
qboolean r_lastvertvalid;
void R_EmitEdge(mvertex_t *pv0, mvertex_t *pv1);
void R_ClipEdge(mvertex_t *pv0, mvertex_t *pv1, clipplane_t *clip);
void R_EmitCachedEdge(void);
void R_RenderFace(msurface_t *fa, int clipflags);
void R_RenderBmodelFace(bedge_t *pedges, msurface_t *psurf);
void R_RenderPoly(msurface_t *fa, int clipflags);
void R_ZDrawSubmodelPolys(model_t *pmodel);
/* r_edge.c */
edge_t *r_edges;
edge_t *edge_p;
edge_t *edge_max;
surf_t *surfaces;
surf_t *surface_p;
surf_t *surf_max;
edge_t *newedges[MAXHEIGHT];
edge_t *removeedges[MAXHEIGHT];
espan_t *span_p;
espan_t *max_span_p;
int r_currentkey;
int current_iv;
int edge_head_u_shift20;
int edge_tail_u_shift20;
edge_t edge_head;
edge_t edge_tail;
edge_t edge_aftertail;
edge_t edge_sentinel;
float fv;
void R_DrawCulledPolys(void);
void R_BeginEdgeFrame(void);
void R_InsertNewEdges(edge_t *edgestoadd, edge_t *edgelist);
void R_RemoveEdges(edge_t *pedge);
void R_StepActiveU(edge_t *pedge);
void R_CleanupSpan(void);
void R_LeadingEdgeBackwards(edge_t *edge);
void R_TrailingEdge(surf_t *surf, edge_t *edge);
void R_LeadingEdge(edge_t *edge);
void R_GenerateSpans(void);
void R_GenerateSpansBackward(void);
void R_ScanEdges(void);
/* r_efrag.c */
mnode_t *r_pefragtopnode;
efrag_t **lastlink;
vec3_t r_emins;
vec3_t r_emaxs;
entity_t *r_addent;
void R_RemoveEfrags(entity_t *ent);
void R_SplitEntityOnNode(mnode_t *node);
void R_SplitEntityOnNode2(mnode_t *node);
void R_AddEfrags(entity_t *ent);
void R_StoreEfrags(efrag_t **ppefrag);
/* r_light.c */
int r_dlightframecount;
void R_AnimateLight(void);
void R_MarkLights(dlight_t *light, int bit, mnode_t *node);
void R_PushDlights(void);
int RecursiveLightPoint(mnode_t *node, vec3_t start, vec3_t end);
int R_LightPoint(vec3_t p);
/* r_main.c */
void *colormap;
vec3_t viewlightvec;
alight_t r_viewlighting;
float r_time1;
int r_numallocatededges;
qboolean r_drawpolys;
qboolean r_drawculledpolys;
qboolean r_worldpolysbacktofront;
qboolean r_recursiveaffinetriangles;
int r_pixbytes;
float r_aliasuvscale;
int r_outofsurfaces;
int r_outofedges;
qboolean r_dowarp;
qboolean r_dowarpold;
qboolean r_viewchanged;
int numbtofpolys;
btofpoly_t *pbtofpolys;
mvertex_t *r_pcurrentvertbase;
int c_surf;
int r_maxsurfsseen;
int r_maxedgesseen;
int r_cnumsurfs;
qboolean r_surfsonstack;
int r_clipflags;
byte *r_warpbuffer;
byte *r_stack_start;
qboolean r_fov_greater_than_90;
vec3_t vup;
vec3_t base_vup;
vec3_t vpn;
vec3_t base_vpn;
vec3_t vright;
vec3_t base_vright;
vec3_t r_origin;
refdef_t r_refdef;
float xcenter;
float ycenter;
float xscale;
float yscale;
float xscaleinv;
float yscaleinv;
float xscaleshrink;
float yscaleshrink;
float aliasxscale;
float aliasyscale;
float aliasxcenter;
float aliasycenter;
int screenwidth;
float pixelAspect;
float screenAspect;
float verticalFieldOfView;
float xOrigin;
float yOrigin;
mplane_t screenedge[4];
int r_framecount;
int r_visframecount;
int d_spanpixcount;
int r_polycount;
int r_drawnpolycount;
int r_wholepolycount;
char viewmodname[VIEWMODNAME_LENGTH+1];
int modcount;
int *pfrustum_indexes[4];
int r_frustum_indexes[4*6];
int reinit_surfcache;
mleaf_t *r_viewleaf;
mleaf_t *r_oldviewleaf;
texture_t *r_notexture_mip;
float r_aliastransition;
float r_resfudge;
int d_lightstylevalue[256];
float dp_time1;
float dp_time2;
float db_time1;
float db_time2;
float rw_time1;
float rw_time2;
float se_time1;
float se_time2;
float de_time1;
float de_time2;
float dv_time1;
float dv_time2;
cvar_t r_draworder;
cvar_t r_speeds;
cvar_t r_timegraph;
cvar_t r_graphheight;
cvar_t r_clearcolor;
cvar_t r_waterwarp;
cvar_t r_fullbright;
cvar_t r_drawentities;
cvar_t r_drawviewmodel;
cvar_t r_aliasstats;
cvar_t r_dspeeds;
cvar_t r_drawflat;
cvar_t r_ambient;
cvar_t r_reportsurfout;
cvar_t r_maxsurfs;
cvar_t r_numsurfs;
cvar_t r_reportedgeout;
cvar_t r_maxedges;
cvar_t r_numedges;
cvar_t r_aliastransbase;
cvar_t r_aliastransadj;
void R_InitTextures(void);
void R_Init(void);
void R_NewMap(void);
void R_SetVrect(vrect_t *pvrectin, vrect_t *pvrect, int lineadj);
void R_ViewChanged(vrect_t *pvrect, int lineadj, float aspect);
void R_MarkLeaves(void);
void R_DrawEntitiesOnList(void);
void R_DrawViewModel(void);
int R_BmodelCheckBBox(model_t *clmodel, float *minmaxs);
void R_DrawBEntitiesOnList(void);
void R_EdgeDrawing(void);
void R_RenderView_(void);
void R_RenderView(void);
void R_InitTurb(void);
/* r_misc.c */
void R_CheckVariables(void);
void Show(void);
void R_TimeRefresh_f(void);
void R_LineGraph(int x, int y, int h);
void R_TimeGraph(void);
void R_PrintTimes(void);
void R_PrintDSpeeds(void);
void R_PrintAliasStats(void);
void WarpPalette(void);
void R_TransformFrustum(void);
void TransformVector(vec3_t in, vec3_t out);
void R_TransformPlane(mplane_t *p, float *normal, float *dist);
void R_SetUpFrustumIndexes(void);
void R_SetupFrame(void);
/* r_part.c */
int ramp1[8];
int ramp2[8];
int ramp3[8];
particle_t *active_particles;
particle_t *free_particles;
particle_t *particles;
int r_numparticles;
vec3_t r_pright;
vec3_t r_pup;
vec3_t r_ppn;
void R_InitParticles(void);
void R_DarkFieldParticles(entity_t *ent);
vec3_t avelocities[NUMVERTEXNORMALS];
float beamlength;
vec3_t avelocity;
float partstep;
float timescale;
void R_EntityParticles(entity_t *ent);
void R_ClearParticles(void);
void R_ReadPointFile_f(void);
void R_ParseParticleEffect(void);
void R_ParticleExplosion(vec3_t org);
void R_ParticleExplosion2(vec3_t org, int colorStart, int colorLength);
void R_BlobExplosion(vec3_t org);
void R_RunParticleEffect(vec3_t org, vec3_t dir, int color, int count);
void R_LavaSplash(vec3_t org);
void R_TeleportSplash(vec3_t org);
void R_RocketTrail(vec3_t start, vec3_t end, int type);
void R_DrawParticles(void);
/* r_sky.c */
int iskyspeed;
int iskyspeed2;
float skyspeed;
float skyspeed2;
float skytime;
byte *r_skysource;
int r_skymade;
int r_skydirect;
byte bottomsky[128*131];
byte bottommask[128*131];
byte newsky[128*256];
void R_InitSky(texture_t *mt);
void R_MakeSky(void);
void R_GenSkyTile(void *pdest);
void R_GenSkyTile16(void *pdest);
void R_SetSkyFrame(void);
/* r_sprite.c */
spritedesc_t r_spritedesc;
void R_RotateSprite(float beamlength);
int R_ClipSpriteFace(int nump, clipplane_t *pclipplane);
void R_SetupAndDrawSprite(void);
mspriteframe_t *R_GetSpriteframe(msprite_t *psprite);
void R_DrawSprite(void);
/* r_surf.c */
drawsurf_t r_drawsurf;
int lightleft;
int sourcesstep;
int blocksize;
int sourcetstep;
int lightdelta;
int lightdeltastep;
int lightright;
int lightleftstep;
int lightrightstep;
int blockdivshift;
unsigned blockdivmask;
void *prowdestbase;
unsigned char *pbasesource;
int surfrowbytes;
unsigned *r_lightptr;
int r_stepback;
int r_lightwidth;
int r_numhblocks;
int r_numvblocks;
unsigned char *r_source;
unsigned char *r_sourcemax;
unsigned blocklights[18*18];
void R_AddDynamicLights(void);
void R_BuildLightMap(void);
texture_t *R_TextureAnimation(texture_t *base);
void R_DrawSurface(void);
void R_DrawSurfaceBlock8_mip0(void);
void R_DrawSurfaceBlock8_mip1(void);
void R_DrawSurfaceBlock8_mip2(void);
void R_DrawSurfaceBlock8_mip3(void);
void R_DrawSurfaceBlock16(void);
void R_GenTurbTile(pixel_t *pbasetex, void *pdest);
void R_GenTurbTile16(pixel_t *pbasetex, void *pdest);
void R_GenTile(msurface_t *psurf, void *pdest);
/* r_vars.c */
int r_bmodelactive;
/* sbar.c */
int sb_updates;
qpic_t *sb_nums[2][11];
qpic_t *sb_colon;
qpic_t *sb_slash;
qpic_t *sb_ibar;
qpic_t *sb_sbar;
qpic_t *sb_scorebar;
qpic_t *sb_weapons[7][8];
qpic_t *sb_ammo[4];
qpic_t *sb_sigil[4];
qpic_t *sb_armor[3];
qpic_t *sb_items[32];
qpic_t *sb_faces[7][2];
qpic_t *sb_face_invis;
qpic_t *sb_face_quad;
qpic_t *sb_face_invuln;
qpic_t *sb_face_invis_invuln;
qboolean sb_showscores;
int sb_lines;
qpic_t *rsb_invbar[2];
qpic_t *rsb_weapons[5];
qpic_t *rsb_items[2];
qpic_t *rsb_ammo[3];
qpic_t *rsb_teambord;
qpic_t *hsb_weapons[7][5];
int hipweapons[4];
qpic_t *hsb_items[2];
void Sbar_ShowScores(void);
void Sbar_DontShowScores(void);
void Sbar_Changed(void);
void Sbar_Init(void);
void Sbar_DrawPic(int x, int y, qpic_t *pic);
void Sbar_DrawTransPic(int x, int y, qpic_t *pic);
void Sbar_DrawCharacter(int x, int y, int num);
void Sbar_DrawString(int x, int y, char *str);
int Sbar_itoa(int num, char *buf);
void Sbar_DrawNum(int x, int y, int num, int digits, int color);
int fragsort[MAX_SCOREBOARD];
char scoreboardtext[MAX_SCOREBOARD][20];
int scoreboardtop[MAX_SCOREBOARD];
int scoreboardbottom[MAX_SCOREBOARD];
int scoreboardcount[MAX_SCOREBOARD];
int scoreboardlines;
void Sbar_SortFrags(void);
int Sbar_ColorForMap(int m);
void Sbar_UpdateScoreboard(void);
void Sbar_SoloScoreboard(void);
void Sbar_DrawScoreboard(void);
void Sbar_DrawInventory(void);
void Sbar_DrawFrags(void);
void Sbar_DrawFace(void);
void Sbar_Draw(void);
void Sbar_IntermissionNumber(int x, int y, int num, int digits, int color);
void Sbar_DeathmatchOverlay(void);
void Sbar_MiniDeathmatchOverlay(void);
void Sbar_IntermissionOverlay(void);
void Sbar_FinaleOverlay(void);
/* screen.c */
int scr_copytop;
int scr_copyeverything;
float scr_con_current;
float scr_conlines;
float oldscreensize;
float oldfov;
cvar_t scr_viewsize;
cvar_t scr_fov;
cvar_t scr_conspeed;
cvar_t scr_centertime;
cvar_t scr_showram;
cvar_t scr_showturtle;
cvar_t scr_showpause;
cvar_t scr_printspeed;
qboolean scr_initialized;
qpic_t *scr_ram;
qpic_t *scr_net;
qpic_t *scr_turtle;
int scr_fullupdate;
int clearconsole;
int clearnotify;
viddef_t vid;
vrect_t *pconupdate;
vrect_t scr_vrect;
qboolean scr_disabled_for_loading;
qboolean scr_drawloading;
float scr_disabled_time;
qboolean scr_skipupdate;
qboolean block_drawing;
char scr_centerstring[1024];
float scr_centertime_start;
float scr_centertime_off;
int scr_center_lines;
int scr_erase_lines;
int scr_erase_center;
void SCR_CenterPrint(char *str);
void SCR_EraseCenterString(void);
void SCR_DrawCenterString(void);
void SCR_CheckDrawCenterString(void);
float CalcFov(float fov_x, float width, float height);
void SCR_SizeUp_f(void);
void SCR_SizeDown_f(void);
void SCR_Init(void);
void SCR_DrawRam(void);
void SCR_DrawTurtle(void);
void SCR_DrawNet(void);
void SCR_DrawPause(void);
void SCR_DrawLoading(void);
void SCR_SetUpToDrawConsole(void);
void SCR_DrawConsole(void);
void WritePCXfile(char *filename, byte *data, int width, int height, int rowbytes, byte *palette);
void SCR_ScreenShot_f(void);
void SCR_BeginLoadingPlaque(void);
void SCR_EndLoadingPlaque(void);
char *scr_notifystring;
qboolean scr_drawdialog;
void SCR_DrawNotifyString(void);
int SCR_ModalMessage(char *text);
void SCR_BringDownConsole(void);
void SCR_UpdateScreen(void);
void SCR_UpdateWholeScreen(void);
/* snd_mem.c */
int cache_full_cycle;
void ResampleSfx(sfx_t *sfx, int inrate, int inwidth, byte *data);
sfxcache_t *S_LoadSound(sfx_t *s);
byte *data_p;
byte *iff_end;
byte *last_chunk;
byte *iff_data;
int iff_chunk_len;
short GetLittleShort(void);
int GetLittleLong(void);
void FindNextChunk(char *name);
void FindChunk(char *name);
void DumpChunks(void);
wavinfo_t GetWavinfo(char *name, byte *wav, int wavlength);
/* snd_mix.c */
portable_samplepair_t paintbuffer[PAINTBUFFER_SIZE];
int snd_scaletable[32][256];
int *snd_p;
int snd_linear_count;
int snd_vol;
short *snd_out;
void Snd_WriteLinearBlastStereo16(void);
void S_TransferStereo16(int endtime);
void S_TransferPaintBuffer(int endtime);
void S_PaintChannels(int endtime);
void SND_InitScaletable(void);
void SND_PaintChannelFrom8(channel_t *ch, sfxcache_t *sc, int count);
void SND_PaintChannelFrom16(channel_t *ch, sfxcache_t *sc, int count);
/* snd_next.c */
qboolean SNDDMA_Init(void);
int SNDDMA_GetDMAPos(void);
void SNDDMA_Shutdown(void);
/* snd_null.c */
cvar_t bgmvolume;
cvar_t volume;
void S_Init(void);
void S_AmbientOff(void);
void S_AmbientOn(void);
void S_Shutdown(void);
void S_TouchSound(char *sample);
void S_ClearBuffer(void);
void S_StaticSound(sfx_t *sfx, vec3_t origin, float vol, float attenuation);
void S_StartSound(int entnum, int entchannel, sfx_t *sfx, vec3_t origin, float fvol, float attenuation);
void S_StopSound(int entnum, int entchannel);
sfx_t *S_PrecacheSound(char *sample);
void S_ClearPrecache(void);
void S_Update(vec3_t origin, vec3_t v_forward, vec3_t v_right, vec3_t v_up);
void S_StopAllSounds(qboolean clear);
void S_BeginPrecaching(void);
void S_EndPrecaching(void);
void S_ExtraUpdate(void);
void S_LocalSound(char *s);
/* sv_main.c */
server_t sv;
server_static_t svs;
char localmodels[MAX_MODELS][5];
void SV_Init(void);
void SV_StartParticle(vec3_t org, vec3_t dir, int color, int count);
void SV_StartSound(edict_t *entity, int channel, char *sample, int volume, float attenuation);
void SV_SendServerinfo(client_t *client);
void SV_ConnectClient(int clientnum);
void SV_CheckForNewClients(void);
void SV_ClearDatagram(void);
int fatbytes;
byte fatpvs[MAX_MAP_LEAFS/8];
void SV_AddToFatPVS(vec3_t org, mnode_t *node);
byte *SV_FatPVS(vec3_t org);
void SV_WriteEntitiesToClient(edict_t *clent, sizebuf_t *msg);
void SV_CleanupEnts(void);
void SV_WriteClientdataToMessage(edict_t *ent, sizebuf_t *msg);
qboolean SV_SendClientDatagram(client_t *client);
void SV_UpdateToReliableMessages(void);
void SV_SendNop(client_t *client);
void SV_SendClientMessages(void);
int SV_ModelIndex(char *name);
void SV_CreateBaseline(void);
void SV_SendReconnect(void);
void SV_SaveSpawnparms(void);
/* sv_move.c */
int c_yes;
int c_no;
qboolean SV_CheckBottom(edict_t *ent);
qboolean SV_movestep(edict_t *ent, vec3_t move, qboolean relink);
qboolean SV_StepDirection(edict_t *ent, float yaw, float dist);
void SV_FixCheckBottom(edict_t *ent);
void SV_NewChaseDir(edict_t *actor, edict_t *enemy, float dist);
qboolean SV_CloseEnough(edict_t *ent, edict_t *goal, float dist);
void SV_MoveToGoal(void);
/* sv_phys.c */
cvar_t sv_friction;
cvar_t sv_stopspeed;
cvar_t sv_gravity;
cvar_t sv_maxvelocity;
cvar_t sv_nostep;
void SV_CheckAllEnts(void);
void SV_CheckVelocity(edict_t *ent);
qboolean SV_RunThink(edict_t *ent);
void SV_Impact(edict_t *e1, edict_t *e2);
int ClipVelocity(vec3_t in, vec3_t normal, vec3_t out, float overbounce);
int SV_FlyMove(edict_t *ent, float time, trace_t *steptrace);
void SV_AddGravity(edict_t *ent);
trace_t SV_PushEntity(edict_t *ent, vec3_t push);
void SV_PushMove(edict_t *pusher, float movetime);
void SV_PushRotate(edict_t *pusher, float movetime);
void SV_Physics_Pusher(edict_t *ent);
void SV_CheckStuck(edict_t *ent);
qboolean SV_CheckWater(edict_t *ent);
void SV_WallFriction(edict_t *ent, trace_t *trace);
int SV_TryUnstick(edict_t *ent, vec3_t oldvel);
void SV_WalkMove(edict_t *ent);
void SV_Physics_Client(edict_t *ent, int num);
void SV_Physics_None(edict_t *ent);
void SV_Physics_Follow(edict_t *ent);
void SV_Physics_Noclip(edict_t *ent);
void SV_CheckWaterTransition(edict_t *ent);
void SV_Physics_Toss(edict_t *ent);
void SV_Physics_Step(edict_t *ent);
void SV_Physics_Step(edict_t *ent);
void SV_Physics(void);
trace_t SV_Trace_Toss(edict_t *ent, edict_t *ignore);
/* sv_user.c */
edict_t *sv_player;
cvar_t sv_edgefriction;
vec3_t wishdir;
float wishspeed;
float *angles;
float *origin;
float *velocity;
qboolean onground;
usercmd_t cmd;
cvar_t sv_idealpitchscale;
void SV_SetIdealPitch(void);
void SV_UserFriction(void);
cvar_t sv_maxspeed;
cvar_t sv_accelerate;
void SV_Accelerate(vec3_t wishvel);
void SV_Accelerate(void);
void SV_AirAccelerate(vec3_t wishveloc);
void DropPunchAngle(void);
void SV_WaterMove(void);
void SV_WaterJump(void);
void SV_AirMove(void);
void SV_ClientThink(void);
void SV_ReadClientMove(usercmd_t *move);
qboolean SV_ReadClientMessage(void);
void SV_RunClients(void);
/* sys_null.c */
qboolean isDedicated;
int findhandle(void);
int Sys_FileOpenRead(char *path, int *hndl);
int Sys_FileOpenWrite(char *path);
void Sys_FileClose(int handle);
void Sys_FileSeek(int handle, int position);
int Sys_FileRead(int handle, void *dest, int count);
int Sys_FileWrite(int handle, void *data, int count);
int Sys_FileTime(char *path);
void Sys_mkdir(char *path);
void Sys_DebugNumber(int y, int val);
void Sys_DebugLog(const char *file, const char *fmt, ...);
void Sys_Printf(char *fmt, ...);
void Sys_MakeCodeWriteable(unsigned long startaddr, unsigned long length);
void Sys_Quit(void);
void Sys_Init(void);
void Sys_Error(char *error, ...);
void Sys_Warn(char *warning, ...);
double Sys_FloatTime(void);
char *Sys_ConsoleInput(void);
void Sys_Sleep(void);
void Sys_SendKeyEvents(void);
void Sys_HighFPPrecision(void);
void Sys_LowFPPrecision(void);
void main(int argc, char **argv);
/* vid_null.c */
fixed16_t sadjust;
fixed16_t tadjust;
fixed16_t bbextents;
fixed16_t bbextentt;
void (*prealspandrawer)(void);
const unsigned short square_index[];
viddef_t vid;
byte vid_buffer[BASEWIDTH*BASEHEIGHT];
short zbuffer[BASEWIDTH*BASEHEIGHT];
byte surfcache[256 * 1024];
unsigned short d_8to16table[256];
unsigned d_8to24table[256];
void VID_HandlePause(qboolean value);
void LoadShaderProgram(void);
void VID_SetPalette(unsigned char *palette);
void VID_ShiftPalette(unsigned char *palette);
void VID_Init(unsigned char *palette);
void VID_Shutdown(void);
void VID_Update(vrect_t *rects);
void D_BeginDirectRect(int x, int y, byte *pbitmap, int width, int height);
void D_EndDirectRect(int x, int y, int width, int height);
int gladLoadGL(void);
struct gladGLversionStruct GLVersion;
int GLAD_GL_VERSION_1_0;
int GLAD_GL_VERSION_1_1;
int GLAD_GL_VERSION_1_2;
int GLAD_GL_VERSION_1_3;
int GLAD_GL_VERSION_1_4;
int GLAD_GL_VERSION_1_5;
int GLAD_GL_VERSION_2_0;
int GLAD_GL_VERSION_2_1;
int GLAD_GL_VERSION_3_0;
int GLAD_GL_VERSION_3_1;
int GLAD_GL_VERSION_3_2;
int GLAD_GL_VERSION_3_3;
int GLAD_GL_VERSION_4_0;
int GLAD_GL_VERSION_4_1;
int GLAD_GL_VERSION_4_2;
int GLAD_GL_VERSION_4_3;
int GLAD_GL_VERSION_4_4;
int GLAD_GL_VERSION_4_5;
int GLAD_GL_VERSION_4_6;
int GLAD_GL_SGIX_pixel_tiles;
int GLAD_GL_EXT_post_depth_coverage;
int GLAD_GL_APPLE_element_array;
int GLAD_GL_AMD_multi_draw_indirect;
int GLAD_GL_EXT_blend_subtract;
int GLAD_GL_SGIX_tag_sample_buffer;
int GLAD_GL_NV_point_sprite;
int GLAD_GL_IBM_texture_mirrored_repeat;
int GLAD_GL_APPLE_transform_hint;
int GLAD_GL_ATI_separate_stencil;
int GLAD_GL_NV_shader_atomic_int64;
int GLAD_GL_EXT_semaphore_win32;
int GLAD_GL_NV_vertex_program2_option;
int GLAD_GL_EXT_texture_buffer_object;
int GLAD_GL_ARB_vertex_blend;
int GLAD_GL_OVR_multiview;
int GLAD_GL_NV_vertex_program2;
int GLAD_GL_ARB_program_interface_query;
int GLAD_GL_EXT_misc_attribute;
int GLAD_GL_NV_multisample_coverage;
int GLAD_GL_ARB_shading_language_packing;
int GLAD_GL_EXT_texture_cube_map;
int GLAD_GL_NV_viewport_array2;
int GLAD_GL_ARB_texture_stencil8;
int GLAD_GL_EXT_index_func;
int GLAD_GL_EXT_memory_object_fd;
int GLAD_GL_OES_compressed_paletted_texture;
int GLAD_GL_MESA_shader_integer_functions;
int GLAD_GL_NV_shader_buffer_load;
int GLAD_GL_EXT_color_subtable;
int GLAD_GL_SUNX_constant_data;
int GLAD_GL_EXT_texture_compression_s3tc;
int GLAD_GL_EXT_multi_draw_arrays;
int GLAD_GL_ARB_shader_atomic_counters;
int GLAD_GL_ARB_arrays_of_arrays;
int GLAD_GL_NV_conditional_render;
int GLAD_GL_EXT_texture_env_combine;
int GLAD_GL_NV_fog_distance;
int GLAD_GL_SGIX_async_histogram;
int GLAD_GL_MESA_resize_buffers;
int GLAD_GL_NV_light_max_exponent;
int GLAD_GL_NV_texture_env_combine4;
int GLAD_GL_ARB_spirv_extensions;
int GLAD_GL_ARB_texture_view;
int GLAD_GL_ARB_texture_env_combine;
int GLAD_GL_ARB_map_buffer_range;
int GLAD_GL_EXT_convolution;
int GLAD_GL_NV_compute_program5;
int GLAD_GL_NV_vertex_attrib_integer_64bit;
int GLAD_GL_EXT_paletted_texture;
int GLAD_GL_ARB_texture_buffer_object;
int GLAD_GL_ATI_pn_triangles;
int GLAD_GL_SGIX_resample;
int GLAD_GL_SGIX_flush_raster;
int GLAD_GL_EXT_light_texture;
int GLAD_GL_ARB_point_sprite;
int GLAD_GL_SUN_convolution_border_modes;
int GLAD_GL_EXT_semaphore_fd;
int GLAD_GL_NV_parameter_buffer_object2;
int GLAD_GL_ARB_half_float_pixel;
int GLAD_GL_NV_tessellation_program5;
int GLAD_GL_REND_screen_coordinates;
int GLAD_GL_EXT_shared_texture_palette;
int GLAD_GL_EXT_packed_float;
int GLAD_GL_OML_subsample;
int GLAD_GL_SGIX_vertex_preclip;
int GLAD_GL_SGIX_texture_scale_bias;
int GLAD_GL_AMD_draw_buffers_blend;
int GLAD_GL_APPLE_texture_range;
int GLAD_GL_EXT_texture_array;
int GLAD_GL_NV_texture_barrier;
int GLAD_GL_ARB_texture_query_levels;
int GLAD_GL_NV_texgen_emboss;
int GLAD_GL_EXT_texture_swizzle;
int GLAD_GL_ARB_texture_rg;
int GLAD_GL_ARB_vertex_type_2_10_10_10_rev;
int GLAD_GL_ARB_fragment_shader;
int GLAD_GL_3DFX_tbuffer;
int GLAD_GL_GREMEDY_frame_terminator;
int GLAD_GL_IBM_cull_vertex;
int GLAD_GL_EXT_separate_shader_objects;
int GLAD_GL_NV_texture_multisample;
int GLAD_GL_ARB_shader_objects;
int GLAD_GL_ARB_framebuffer_object;
int GLAD_GL_EXT_external_buffer;
int GLAD_GL_ATI_envmap_bumpmap;
int GLAD_GL_AMD_shader_explicit_vertex_parameter;
int GLAD_GL_ARB_robust_buffer_access_behavior;
int GLAD_GL_ARB_shader_stencil_export;
int GLAD_GL_NV_texture_rectangle;
int GLAD_GL_ARB_enhanced_layouts;
int GLAD_GL_ARB_texture_rectangle;
int GLAD_GL_SGI_texture_color_table;
int GLAD_GL_NV_viewport_swizzle;
int GLAD_GL_ATI_map_object_buffer;
int GLAD_GL_ARB_robustness;
int GLAD_GL_NV_pixel_data_range;
int GLAD_GL_EXT_framebuffer_blit;
int GLAD_GL_ARB_gpu_shader_fp64;
int GLAD_GL_NV_command_list;
int GLAD_GL_SGIX_depth_texture;
int GLAD_GL_AMD_framebuffer_sample_positions;
int GLAD_GL_GREMEDY_string_marker;
int GLAD_GL_ARB_texture_compression_bptc;
int GLAD_GL_EXT_subtexture;
int GLAD_GL_EXT_pixel_transform_color_table;
int GLAD_GL_EXT_texture_compression_rgtc;
int GLAD_GL_ARB_shader_atomic_counter_ops;
int GLAD_GL_SGIX_depth_pass_instrument;
int GLAD_GL_EXT_gpu_program_parameters;
int GLAD_GL_NV_evaluators;
int GLAD_GL_SGIS_texture_filter4;
int GLAD_GL_AMD_performance_monitor;
int GLAD_GL_NV_geometry_shader4;
int GLAD_GL_EXT_stencil_clear_tag;
int GLAD_GL_NV_vertex_program1_1;
int GLAD_GL_NV_present_video;
int GLAD_GL_ARB_texture_compression_rgtc;
int GLAD_GL_HP_convolution_border_modes;
int GLAD_GL_EXT_shader_integer_mix;
int GLAD_GL_SGIX_framezoom;
int GLAD_GL_ARB_stencil_texturing;
int GLAD_GL_ARB_shader_clock;
int GLAD_GL_NV_shader_atomic_fp16_vector;
int GLAD_GL_SGIX_fog_offset;
int GLAD_GL_ARB_draw_elements_base_vertex;
int GLAD_GL_INGR_interlace_read;
int GLAD_GL_NV_transform_feedback;
int GLAD_GL_NV_fragment_program;
int GLAD_GL_AMD_stencil_operation_extended;
int GLAD_GL_ARB_seamless_cubemap_per_texture;
int GLAD_GL_ARB_instanced_arrays;
int GLAD_GL_EXT_polygon_offset;
int GLAD_GL_NV_vertex_array_range2;
int GLAD_GL_KHR_robustness;
int GLAD_GL_AMD_sparse_texture;
int GLAD_GL_ARB_clip_control;
int GLAD_GL_NV_fragment_coverage_to_color;
int GLAD_GL_NV_fence;
int GLAD_GL_ARB_texture_buffer_range;
int GLAD_GL_SUN_mesh_array;
int GLAD_GL_ARB_vertex_attrib_binding;
int GLAD_GL_ARB_framebuffer_no_attachments;
int GLAD_GL_ARB_cl_event;
int GLAD_GL_EXT_vertex_weighting;
int GLAD_GL_ARB_derivative_control;
int GLAD_GL_NV_packed_depth_stencil;
int GLAD_GL_OES_single_precision;
int GLAD_GL_NV_primitive_restart;
int GLAD_GL_SUN_global_alpha;
int GLAD_GL_ARB_fragment_shader_interlock;
int GLAD_GL_EXT_texture_object;
int GLAD_GL_AMD_name_gen_delete;
int GLAD_GL_NV_texture_compression_vtc;
int GLAD_GL_NV_sample_mask_override_coverage;
int GLAD_GL_NV_texture_shader3;
int GLAD_GL_NV_texture_shader2;
int GLAD_GL_ARB_texture_filter_anisotropic;
int GLAD_GL_EXT_texture;
int GLAD_GL_ARB_buffer_storage;
int GLAD_GL_AMD_shader_atomic_counter_ops;
int GLAD_GL_APPLE_vertex_program_evaluators;
int GLAD_GL_AMD_texture_gather_bias_lod;
int GLAD_GL_ARB_explicit_uniform_location;
int GLAD_GL_ARB_depth_buffer_float;
int GLAD_GL_NV_path_rendering_shared_edge;
int GLAD_GL_SGIX_shadow_ambient;
int GLAD_GL_ARB_texture_cube_map;
int GLAD_GL_AMD_vertex_shader_viewport_index;
int GLAD_GL_SGIX_list_priority;
int GLAD_GL_NV_vertex_buffer_unified_memory;
int GLAD_GL_NV_uniform_buffer_unified_memory;
int GLAD_GL_ARB_clear_texture;
int GLAD_GL_ATI_texture_env_combine3;
int GLAD_GL_NV_depth_clamp;
int GLAD_GL_ARB_map_buffer_alignment;
int GLAD_GL_EXT_memory_object;
int GLAD_GL_NV_blend_equation_advanced;
int GLAD_GL_SGIS_sharpen_texture;
int GLAD_GL_KHR_robust_buffer_access_behavior;
int GLAD_GL_ARB_pipeline_statistics_query;
int GLAD_GL_ARB_vertex_program;
int GLAD_GL_ARB_texture_rgb10_a2ui;
int GLAD_GL_OML_interlace;
int GLAD_GL_ATI_pixel_format_float;
int GLAD_GL_NV_clip_space_w_scaling;
int GLAD_GL_ARB_vertex_buffer_object;
int GLAD_GL_EXT_shadow_funcs;
int GLAD_GL_ATI_text_fragment_shader;
int GLAD_GL_NV_vertex_array_range;
int GLAD_GL_SGIX_fragment_lighting;
int GLAD_GL_AMD_shader_ballot;
int GLAD_GL_NV_texture_expand_normal;
int GLAD_GL_NV_framebuffer_multisample_coverage;
int GLAD_GL_EXT_timer_query;
int GLAD_GL_EXT_vertex_array_bgra;
int GLAD_GL_NV_bindless_texture;
int GLAD_GL_KHR_debug;
int GLAD_GL_SGIS_texture_border_clamp;
int GLAD_GL_ATI_vertex_attrib_array_object;
int GLAD_GL_SGIX_clipmap;
int GLAD_GL_EXT_geometry_shader4;
int GLAD_GL_ARB_shader_texture_image_samples;
int GLAD_GL_MESA_ycbcr_texture;
int GLAD_GL_MESAX_texture_stack;
int GLAD_GL_AMD_seamless_cubemap_per_texture;
int GLAD_GL_EXT_bindable_uniform;
int GLAD_GL_KHR_texture_compression_astc_hdr;
int GLAD_GL_ARB_shader_ballot;
int GLAD_GL_KHR_blend_equation_advanced;
int GLAD_GL_ARB_fragment_program_shadow;
int GLAD_GL_ATI_element_array;
int GLAD_GL_AMD_texture_texture4;
int GLAD_GL_SGIX_reference_plane;
int GLAD_GL_EXT_stencil_two_side;
int GLAD_GL_ARB_transform_feedback_overflow_query;
int GLAD_GL_SGIX_texture_lod_bias;
int GLAD_GL_KHR_no_error;
int GLAD_GL_NV_explicit_multisample;
int GLAD_GL_NV_stereo_view_rendering;
int GLAD_GL_IBM_static_data;
int GLAD_GL_EXT_clip_volume_hint;
int GLAD_GL_EXT_texture_perturb_normal;
int GLAD_GL_NV_fragment_program2;
int GLAD_GL_NV_fragment_program4;
int GLAD_GL_EXT_point_parameters;
int GLAD_GL_PGI_misc_hints;
int GLAD_GL_SGIX_subsample;
int GLAD_GL_AMD_shader_stencil_export;
int GLAD_GL_ARB_shader_texture_lod;
int GLAD_GL_ARB_vertex_shader;
int GLAD_GL_ARB_depth_clamp;
int GLAD_GL_SGIS_texture_select;
int GLAD_GL_NV_texture_shader;
int GLAD_GL_ARB_tessellation_shader;
int GLAD_GL_EXT_draw_buffers2;
int GLAD_GL_ARB_vertex_attrib_64bit;
int GLAD_GL_EXT_texture_filter_minmax;
int GLAD_GL_NV_query_resource;
int GLAD_GL_AMD_interleaved_elements;
int GLAD_GL_ARB_fragment_program;
int GLAD_GL_OML_resample;
int GLAD_GL_APPLE_ycbcr_422;
int GLAD_GL_SGIX_texture_add_env;
int GLAD_GL_ARB_shadow_ambient;
int GLAD_GL_ARB_texture_storage;
int GLAD_GL_EXT_pixel_buffer_object;
int GLAD_GL_ARB_copy_image;
int GLAD_GL_SGIS_pixel_texture;
int GLAD_GL_SGIS_generate_mipmap;
int GLAD_GL_SGIX_instruments;
int GLAD_GL_ARB_fragment_layer_viewport;
int GLAD_GL_ARB_shader_storage_buffer_object;
int GLAD_GL_EXT_sparse_texture2;
int GLAD_GL_EXT_blend_minmax;
int GLAD_GL_MESA_pack_invert;
int GLAD_GL_ARB_base_instance;
int GLAD_GL_SGIX_convolution_accuracy;
int GLAD_GL_PGI_vertex_hints;
int GLAD_GL_AMD_transform_feedback4;
int GLAD_GL_ARB_ES3_1_compatibility;
int GLAD_GL_EXT_memory_object_win32;
int GLAD_GL_EXT_texture_integer;
int GLAD_GL_ARB_texture_multisample;
int GLAD_GL_ATI_vertex_streams;
int GLAD_GL_AMD_gpu_shader_int64;
int GLAD_GL_S3_s3tc;
int GLAD_GL_ARB_query_buffer_object;
int GLAD_GL_AMD_vertex_shader_tessellator;
int GLAD_GL_ARB_invalidate_subdata;
int GLAD_GL_NV_draw_vulkan_image;
int GLAD_GL_EXT_index_material;
int GLAD_GL_NVX_linked_gpu_multicast;
int GLAD_GL_NV_blend_equation_advanced_coherent;
int GLAD_GL_KHR_texture_compression_astc_sliced_3d;
int GLAD_GL_INTEL_parallel_arrays;
int GLAD_GL_ATI_draw_buffers;
int GLAD_GL_WIN_specular_fog;
int GLAD_GL_EXT_cmyka;
int GLAD_GL_SGIX_pixel_texture;
int GLAD_GL_APPLE_specular_vector;
int GLAD_GL_ARB_compatibility;
int GLAD_GL_ARB_timer_query;
int GLAD_GL_SGIX_interlace;
int GLAD_GL_NV_parameter_buffer_object;
int GLAD_GL_AMD_shader_trinary_minmax;
int GLAD_GL_ARB_direct_state_access;
int GLAD_GL_EXT_rescale_normal;
int GLAD_GL_ARB_pixel_buffer_object;
int GLAD_GL_ARB_uniform_buffer_object;
int GLAD_GL_ARB_vertex_type_10f_11f_11f_rev;
int GLAD_GL_ARB_texture_swizzle;
int GLAD_GL_NV_transform_feedback2;
int GLAD_GL_SGIX_async_pixel;
int GLAD_GL_NV_fragment_program_option;
int GLAD_GL_ARB_explicit_attrib_location;
int GLAD_GL_EXT_blend_color;
int GLAD_GL_NV_shader_thread_group;
int GLAD_GL_EXT_stencil_wrap;
int GLAD_GL_EXT_index_array_formats;
int GLAD_GL_OVR_multiview2;
int GLAD_GL_EXT_histogram;
int GLAD_GL_ARB_get_texture_sub_image;
int GLAD_GL_SGIS_point_parameters;
int GLAD_GL_SGIX_ycrcb;
int GLAD_GL_EXT_direct_state_access;
int GLAD_GL_ARB_cull_distance;
int GLAD_GL_AMD_sample_positions;
int GLAD_GL_NV_vertex_program;
int GLAD_GL_NV_shader_thread_shuffle;
int GLAD_GL_ARB_shader_precision;
int GLAD_GL_EXT_vertex_shader;
int GLAD_GL_EXT_blend_func_separate;
int GLAD_GL_APPLE_fence;
int GLAD_GL_NV_query_resource_tag;
int GLAD_GL_OES_byte_coordinates;
int GLAD_GL_ARB_transpose_matrix;
int GLAD_GL_ARB_provoking_vertex;
int GLAD_GL_EXT_fog_coord;
int GLAD_GL_EXT_vertex_array;
int GLAD_GL_ARB_half_float_vertex;
int GLAD_GL_EXT_blend_equation_separate;
int GLAD_GL_NV_framebuffer_mixed_samples;
int GLAD_GL_NVX_conditional_render;
int GLAD_GL_ARB_multi_draw_indirect;
int GLAD_GL_EXT_raster_multisample;
int GLAD_GL_NV_copy_image;
int GLAD_GL_HP_texture_lighting;
int GLAD_GL_INTEL_framebuffer_CMAA;
int GLAD_GL_ARB_transform_feedback2;
int GLAD_GL_ARB_transform_feedback3;
int GLAD_GL_SGIX_ycrcba;
int GLAD_GL_EXT_debug_marker;
int GLAD_GL_EXT_bgra;
int GLAD_GL_ARB_sparse_texture_clamp;
int GLAD_GL_EXT_pixel_transform;
int GLAD_GL_ARB_conservative_depth;
int GLAD_GL_ATI_fragment_shader;
int GLAD_GL_ARB_vertex_array_object;
int GLAD_GL_SUN_triangle_list;
int GLAD_GL_EXT_texture_env_add;
int GLAD_GL_EXT_packed_depth_stencil;
int GLAD_GL_EXT_texture_mirror_clamp;
int GLAD_GL_NV_multisample_filter_hint;
int GLAD_GL_APPLE_float_pixels;
int GLAD_GL_ARB_transform_feedback_instanced;
int GLAD_GL_SGIX_async;
int GLAD_GL_EXT_texture_compression_latc;
int GLAD_GL_NV_robustness_video_memory_purge;
int GLAD_GL_ARB_shading_language_100;
int GLAD_GL_INTEL_performance_query;
int GLAD_GL_ARB_texture_mirror_clamp_to_edge;
int GLAD_GL_NV_gpu_shader5;
int GLAD_GL_NV_bindless_multi_draw_indirect_count;
int GLAD_GL_ARB_ES2_compatibility;
int GLAD_GL_ARB_indirect_parameters;
int GLAD_GL_EXT_window_rectangles;
int GLAD_GL_NV_half_float;
int GLAD_GL_ARB_ES3_2_compatibility;
int GLAD_GL_ATI_texture_mirror_once;
int GLAD_GL_IBM_rasterpos_clip;
int GLAD_GL_EXT_semaphore;
int GLAD_GL_SGIX_shadow;
int GLAD_GL_EXT_polygon_offset_clamp;
int GLAD_GL_NV_deep_texture3D;
int GLAD_GL_ARB_shader_draw_parameters;
int GLAD_GL_SGIX_calligraphic_fragment;
int GLAD_GL_ARB_shader_bit_encoding;
int GLAD_GL_EXT_compiled_vertex_array;
int GLAD_GL_NV_depth_buffer_float;
int GLAD_GL_NV_occlusion_query;
int GLAD_GL_APPLE_flush_buffer_range;
int GLAD_GL_ARB_imaging;
int GLAD_GL_NV_shader_atomic_float;
int GLAD_GL_ARB_draw_buffers_blend;
int GLAD_GL_AMD_gcn_shader;
int GLAD_GL_AMD_blend_minmax_factor;
int GLAD_GL_EXT_texture_sRGB_decode;
int GLAD_GL_ARB_shading_language_420pack;
int GLAD_GL_ARB_shader_viewport_layer_array;
int GLAD_GL_ATI_meminfo;
int GLAD_GL_EXT_abgr;
int GLAD_GL_AMD_pinned_memory;
int GLAD_GL_EXT_texture_snorm;
int GLAD_GL_SGIX_texture_coordinate_clamp;
int GLAD_GL_ARB_clear_buffer_object;
int GLAD_GL_ARB_multisample;
int GLAD_GL_EXT_debug_label;
int GLAD_GL_ARB_sample_shading;
int GLAD_GL_NV_internalformat_sample_query;
int GLAD_GL_INTEL_map_texture;
int GLAD_GL_ARB_texture_env_crossbar;
int GLAD_GL_EXT_422_pixels;
int GLAD_GL_NV_blend_minmax_factor;
int GLAD_GL_NV_conservative_raster_pre_snap_triangles;
int GLAD_GL_ARB_compute_shader;
int GLAD_GL_EXT_blend_logic_op;
int GLAD_GL_ARB_blend_func_extended;
int GLAD_GL_IBM_vertex_array_lists;
int GLAD_GL_ARB_color_buffer_float;
int GLAD_GL_ARB_bindless_texture;
int GLAD_GL_ARB_window_pos;
int GLAD_GL_ARB_internalformat_query;
int GLAD_GL_ARB_shadow;
int GLAD_GL_ARB_texture_mirrored_repeat;
int GLAD_GL_EXT_shader_image_load_store;
int GLAD_GL_EXT_copy_texture;
int GLAD_GL_NV_register_combiners2;
int GLAD_GL_SGIX_ycrcb_subsample;
int GLAD_GL_NV_alpha_to_coverage_dither_control;
int GLAD_GL_SGIX_ir_instrument1;
int GLAD_GL_NV_draw_texture;
int GLAD_GL_EXT_texture_shared_exponent;
int GLAD_GL_EXT_draw_instanced;
int GLAD_GL_NV_copy_depth_to_color;
int GLAD_GL_ARB_viewport_array;
int GLAD_GL_ARB_separate_shader_objects;
int GLAD_GL_EXT_depth_bounds_test;
int GLAD_GL_HP_image_transform;
int GLAD_GL_ARB_texture_env_add;
int GLAD_GL_NV_video_capture;
int GLAD_GL_ARB_sampler_objects;
int GLAD_GL_ARB_matrix_palette;
int GLAD_GL_SGIS_texture_color_mask;
int GLAD_GL_EXT_packed_pixels;
int GLAD_GL_EXT_coordinate_frame;
int GLAD_GL_ARB_texture_compression;
int GLAD_GL_ARB_multi_bind;
int GLAD_GL_APPLE_aux_depth_stencil;
int GLAD_GL_ARB_shader_subroutine;
int GLAD_GL_EXT_framebuffer_sRGB;
int GLAD_GL_ARB_texture_storage_multisample;
int GLAD_GL_KHR_blend_equation_advanced_coherent;
int GLAD_GL_EXT_vertex_attrib_64bit;
int GLAD_GL_NV_shader_atomic_float64;
int GLAD_GL_ARB_depth_texture;
int GLAD_GL_NV_shader_buffer_store;
int GLAD_GL_OES_query_matrix;
int GLAD_GL_MESA_window_pos;
int GLAD_GL_NV_fill_rectangle;
int GLAD_GL_NV_shader_storage_buffer_object;
int GLAD_GL_ARB_texture_query_lod;
int GLAD_GL_ARB_copy_buffer;
int GLAD_GL_ARB_shader_image_size;
int GLAD_GL_NV_shader_atomic_counters;
int GLAD_GL_APPLE_object_purgeable;
int GLAD_GL_ARB_occlusion_query;
int GLAD_GL_INGR_color_clamp;
int GLAD_GL_SGI_color_table;
int GLAD_GL_NV_gpu_program5_mem_extended;
int GLAD_GL_ARB_texture_cube_map_array;
int GLAD_GL_SGIX_scalebias_hint;
int GLAD_GL_EXT_gpu_shader4;
int GLAD_GL_NV_geometry_program4;
int GLAD_GL_EXT_framebuffer_multisample_blit_scaled;
int GLAD_GL_AMD_debug_output;
int GLAD_GL_ARB_texture_border_clamp;
int GLAD_GL_EXT_win32_keyed_mutex;
int GLAD_GL_ARB_fragment_coord_conventions;
int GLAD_GL_ARB_multitexture;
int GLAD_GL_SGIX_polynomial_ffd;
int GLAD_GL_EXT_texture_env_dot3;
int GLAD_GL_EXT_provoking_vertex;
int GLAD_GL_ARB_point_parameters;
int GLAD_GL_ARB_shader_image_load_store;
int GLAD_GL_ARB_conditional_render_inverted;
int GLAD_GL_HP_occlusion_test;
int GLAD_GL_ARB_ES3_compatibility;
int GLAD_GL_ARB_texture_barrier;
int GLAD_GL_ARB_texture_buffer_object_rgb32;
int GLAD_GL_NV_bindless_multi_draw_indirect;
int GLAD_GL_SGIX_texture_multi_buffer;
int GLAD_GL_AMD_shader_image_load_store_lod;
int GLAD_GL_KHR_texture_compression_astc_ldr;
int GLAD_GL_3DFX_multisample;
int GLAD_GL_INTEL_fragment_shader_ordering;
int GLAD_GL_ARB_texture_env_dot3;
int GLAD_GL_NV_gpu_program4;
int GLAD_GL_NV_gpu_program5;
int GLAD_GL_NV_float_buffer;
int GLAD_GL_SGIS_texture_edge_clamp;
int GLAD_GL_ARB_framebuffer_sRGB;
int GLAD_GL_SUN_slice_accum;
int GLAD_GL_EXT_index_texture;
int GLAD_GL_EXT_shader_image_load_formatted;
int GLAD_GL_ARB_geometry_shader4;
int GLAD_GL_EXT_separate_specular_color;
int GLAD_GL_AMD_depth_clamp_separate;
int GLAD_GL_NV_conservative_raster;
int GLAD_GL_ARB_sparse_texture2;
int GLAD_GL_SGIX_sprite;
int GLAD_GL_ARB_get_program_binary;
int GLAD_GL_AMD_occlusion_query_event;
int GLAD_GL_SGIS_multisample;
int GLAD_GL_EXT_framebuffer_object;
int GLAD_GL_ARB_robustness_isolation;
int GLAD_GL_ARB_vertex_array_bgra;
int GLAD_GL_APPLE_vertex_array_range;
int GLAD_GL_AMD_query_buffer_object;
int GLAD_GL_NV_register_combiners;
int GLAD_GL_ARB_draw_buffers;
int GLAD_GL_NVX_blend_equation_advanced_multi_draw_buffers;
int GLAD_GL_AMD_gpu_shader_int16;
int GLAD_GL_ARB_debug_output;
int GLAD_GL_SGI_color_matrix;
int GLAD_GL_EXT_cull_vertex;
int GLAD_GL_EXT_texture_sRGB;
int GLAD_GL_APPLE_row_bytes;
int GLAD_GL_NV_texgen_reflection;
int GLAD_GL_IBM_multimode_draw_arrays;
int GLAD_GL_KHR_parallel_shader_compile;
int GLAD_GL_APPLE_vertex_array_object;
int GLAD_GL_3DFX_texture_compression_FXT1;
int GLAD_GL_NV_fragment_shader_interlock;
int GLAD_GL_AMD_conservative_depth;
int GLAD_GL_ARB_texture_float;
int GLAD_GL_ARB_compressed_texture_pixel_storage;
int GLAD_GL_SGIS_detail_texture;
int GLAD_GL_NV_geometry_shader_passthrough;
int GLAD_GL_ARB_draw_instanced;
int GLAD_GL_OES_read_format;
int GLAD_GL_ATI_texture_float;
int GLAD_GL_ARB_texture_gather;
int GLAD_GL_AMD_vertex_shader_layer;
int GLAD_GL_ARB_shading_language_include;
int GLAD_GL_APPLE_client_storage;
int GLAD_GL_WIN_phong_shading;
int GLAD_GL_INGR_blend_func_separate;
int GLAD_GL_NV_path_rendering;
int GLAD_GL_NV_conservative_raster_dilate;
int GLAD_GL_AMD_gpu_shader_half_float;
int GLAD_GL_ARB_post_depth_coverage;
int GLAD_GL_ARB_texture_non_power_of_two;
int GLAD_GL_APPLE_rgb_422;
int GLAD_GL_EXT_texture_lod_bias;
int GLAD_GL_ARB_gpu_shader_int64;
int GLAD_GL_ARB_seamless_cube_map;
int GLAD_GL_ARB_shader_group_vote;
int GLAD_GL_NV_vdpau_interop;
int GLAD_GL_ARB_occlusion_query2;
int GLAD_GL_ARB_internalformat_query2;
int GLAD_GL_EXT_texture_filter_anisotropic;
int GLAD_GL_SUN_vertex;
int GLAD_GL_EXT_transform_feedback;
int GLAD_GL_SGIX_igloo_interface;
int GLAD_GL_SGIS_texture_lod;
int GLAD_GL_NV_vertex_program3;
int GLAD_GL_ARB_draw_indirect;
int GLAD_GL_NV_vertex_program4;
int GLAD_GL_AMD_transform_feedback3_lines_triangles;
int GLAD_GL_SGIS_fog_function;
int GLAD_GL_EXT_x11_sync_object;
int GLAD_GL_ARB_sync;
int GLAD_GL_NV_texture_rectangle_compressed;
int GLAD_GL_NV_sample_locations;
int GLAD_GL_NV_gpu_multicast;
int GLAD_GL_ARB_gl_spirv;
int GLAD_GL_ARB_compute_variable_group_size;
int GLAD_GL_OES_fixed_point;
int GLAD_GL_NV_blend_square;
int GLAD_GL_EXT_framebuffer_multisample;
int GLAD_GL_ARB_gpu_shader5;
int GLAD_GL_SGIS_texture4D;
int GLAD_GL_EXT_texture3D;
int GLAD_GL_EXT_multisample;
int GLAD_GL_EXT_secondary_color;
int GLAD_GL_INTEL_conservative_rasterization;
int GLAD_GL_ARB_texture_filter_minmax;
int GLAD_GL_ATI_vertex_array_object;
int GLAD_GL_ARB_parallel_shader_compile;
int GLAD_GL_NVX_gpu_memory_info;
int GLAD_GL_ARB_sparse_texture;
int GLAD_GL_SGIS_point_line_texgen;
int GLAD_GL_ARB_sample_locations;
int GLAD_GL_ARB_sparse_buffer;
int GLAD_GL_ARB_polygon_offset_clamp;
int GLAD_GL_EXT_draw_range_elements;
int GLAD_GL_SGIX_blend_alpha_minmax;
int GLAD_GL_KHR_context_flush_control;
void _pre_call_callback_default(const char *name, void *funcptr, int len_args, ...);
void _post_call_callback_default(const char *name, void *funcptr, int len_args, ...);
int gladLoadGL(void);
struct gladGLversionStruct GLVersion;
int GLAD_GL_VERSION_1_0;
int GLAD_GL_VERSION_1_1;
int GLAD_GL_VERSION_1_2;
int GLAD_GL_VERSION_1_3;
int GLAD_GL_VERSION_1_4;
int GLAD_GL_VERSION_1_5;
int GLAD_GL_VERSION_2_0;
int GLAD_GL_VERSION_2_1;
int GLAD_GL_VERSION_3_0;
int GLAD_GL_VERSION_3_1;
int GLAD_GL_VERSION_3_2;
int GLAD_GL_VERSION_3_3;
int GLAD_GL_VERSION_4_0;
int GLAD_GL_VERSION_4_1;
int GLAD_GL_VERSION_4_2;
int GLAD_GL_VERSION_4_3;
int GLAD_GL_VERSION_4_4;
int GLAD_GL_VERSION_4_5;
int GLAD_GL_VERSION_4_6;
void APIENTRY glad_debug_impl_glLoadIdentity(void);
void APIENTRY glad_debug_impl_glPauseTransformFeedback(void);
void APIENTRY glad_debug_impl_glPopDebugGroup(void);
void APIENTRY glad_debug_impl_glPushMatrix(void);
void APIENTRY glad_debug_impl_glFlush(void);
void APIENTRY glad_debug_impl_glFinish(void);
void APIENTRY glad_debug_impl_glPopName(void);
void APIENTRY glad_debug_impl_glPopAttrib(void);
void APIENTRY glad_debug_impl_glInitNames(void);
void APIENTRY glad_debug_impl_glPopMatrix(void);
void APIENTRY glad_debug_impl_glEnd(void);
void APIENTRY glad_debug_impl_glResumeTransformFeedback(void);
void APIENTRY glad_debug_impl_glEndTransformFeedback(void);
void APIENTRY glad_debug_impl_glPopClientAttrib(void);
void APIENTRY glad_debug_impl_glEndConditionalRender(void);
void APIENTRY glad_debug_impl_glEndList(void);
void APIENTRY glad_debug_impl_glReleaseShaderCompiler(void);
void APIENTRY glad_debug_impl_glTextureBarrier(void);
int GLAD_GL_SGIX_pixel_tiles;
int GLAD_GL_EXT_post_depth_coverage;
int GLAD_GL_APPLE_element_array;
int GLAD_GL_AMD_multi_draw_indirect;
int GLAD_GL_EXT_blend_subtract;
int GLAD_GL_SGIX_tag_sample_buffer;
int GLAD_GL_NV_point_sprite;
int GLAD_GL_IBM_texture_mirrored_repeat;
int GLAD_GL_APPLE_transform_hint;
int GLAD_GL_ATI_separate_stencil;
int GLAD_GL_NV_shader_atomic_int64;
int GLAD_GL_EXT_semaphore_win32;
int GLAD_GL_NV_vertex_program2_option;
int GLAD_GL_EXT_texture_buffer_object;
int GLAD_GL_ARB_vertex_blend;
int GLAD_GL_OVR_multiview;
int GLAD_GL_NV_vertex_program2;
int GLAD_GL_ARB_program_interface_query;
int GLAD_GL_EXT_misc_attribute;
int GLAD_GL_NV_multisample_coverage;
int GLAD_GL_ARB_shading_language_packing;
int GLAD_GL_EXT_texture_cube_map;
int GLAD_GL_NV_viewport_array2;
int GLAD_GL_ARB_texture_stencil8;
int GLAD_GL_EXT_index_func;
int GLAD_GL_EXT_memory_object_fd;
int GLAD_GL_OES_compressed_paletted_texture;
int GLAD_GL_MESA_shader_integer_functions;
int GLAD_GL_NV_shader_buffer_load;
int GLAD_GL_EXT_color_subtable;
int GLAD_GL_SUNX_constant_data;
int GLAD_GL_EXT_texture_compression_s3tc;
int GLAD_GL_EXT_multi_draw_arrays;
int GLAD_GL_ARB_shader_atomic_counters;
int GLAD_GL_ARB_arrays_of_arrays;
int GLAD_GL_NV_conditional_render;
int GLAD_GL_EXT_texture_env_combine;
int GLAD_GL_NV_fog_distance;
int GLAD_GL_SGIX_async_histogram;
int GLAD_GL_MESA_resize_buffers;
int GLAD_GL_NV_light_max_exponent;
int GLAD_GL_NV_texture_env_combine4;
int GLAD_GL_ARB_spirv_extensions;
int GLAD_GL_ARB_texture_view;
int GLAD_GL_ARB_texture_env_combine;
int GLAD_GL_ARB_map_buffer_range;
int GLAD_GL_EXT_convolution;
int GLAD_GL_NV_compute_program5;
int GLAD_GL_NV_vertex_attrib_integer_64bit;
int GLAD_GL_EXT_paletted_texture;
int GLAD_GL_ARB_texture_buffer_object;
int GLAD_GL_ATI_pn_triangles;
int GLAD_GL_SGIX_resample;
int GLAD_GL_SGIX_flush_raster;
int GLAD_GL_EXT_light_texture;
int GLAD_GL_ARB_point_sprite;
int GLAD_GL_SUN_convolution_border_modes;
int GLAD_GL_EXT_semaphore_fd;
int GLAD_GL_NV_parameter_buffer_object2;
int GLAD_GL_ARB_half_float_pixel;
int GLAD_GL_NV_tessellation_program5;
int GLAD_GL_REND_screen_coordinates;
int GLAD_GL_EXT_shared_texture_palette;
int GLAD_GL_EXT_packed_float;
int GLAD_GL_OML_subsample;
int GLAD_GL_SGIX_vertex_preclip;
int GLAD_GL_SGIX_texture_scale_bias;
int GLAD_GL_AMD_draw_buffers_blend;
int GLAD_GL_APPLE_texture_range;
int GLAD_GL_EXT_texture_array;
int GLAD_GL_NV_texture_barrier;
int GLAD_GL_ARB_texture_query_levels;
int GLAD_GL_NV_texgen_emboss;
int GLAD_GL_EXT_texture_swizzle;
int GLAD_GL_ARB_texture_rg;
int GLAD_GL_ARB_vertex_type_2_10_10_10_rev;
int GLAD_GL_ARB_fragment_shader;
int GLAD_GL_3DFX_tbuffer;
int GLAD_GL_GREMEDY_frame_terminator;
int GLAD_GL_IBM_cull_vertex;
int GLAD_GL_EXT_separate_shader_objects;
int GLAD_GL_NV_texture_multisample;
int GLAD_GL_ARB_shader_objects;
int GLAD_GL_ARB_framebuffer_object;
int GLAD_GL_EXT_external_buffer;
int GLAD_GL_ATI_envmap_bumpmap;
int GLAD_GL_AMD_shader_explicit_vertex_parameter;
int GLAD_GL_ARB_robust_buffer_access_behavior;
int GLAD_GL_ARB_shader_stencil_export;
int GLAD_GL_NV_texture_rectangle;
int GLAD_GL_ARB_enhanced_layouts;
int GLAD_GL_ARB_texture_rectangle;
int GLAD_GL_SGI_texture_color_table;
int GLAD_GL_NV_viewport_swizzle;
int GLAD_GL_ATI_map_object_buffer;
int GLAD_GL_ARB_robustness;
int GLAD_GL_NV_pixel_data_range;
int GLAD_GL_EXT_framebuffer_blit;
int GLAD_GL_ARB_gpu_shader_fp64;
int GLAD_GL_NV_command_list;
int GLAD_GL_SGIX_depth_texture;
int GLAD_GL_AMD_framebuffer_sample_positions;
int GLAD_GL_GREMEDY_string_marker;
int GLAD_GL_ARB_texture_compression_bptc;
int GLAD_GL_EXT_subtexture;
int GLAD_GL_EXT_pixel_transform_color_table;
int GLAD_GL_EXT_texture_compression_rgtc;
int GLAD_GL_ARB_shader_atomic_counter_ops;
int GLAD_GL_SGIX_depth_pass_instrument;
int GLAD_GL_EXT_gpu_program_parameters;
int GLAD_GL_NV_evaluators;
int GLAD_GL_SGIS_texture_filter4;
int GLAD_GL_AMD_performance_monitor;
int GLAD_GL_NV_geometry_shader4;
int GLAD_GL_EXT_stencil_clear_tag;
int GLAD_GL_NV_vertex_program1_1;
int GLAD_GL_NV_present_video;
int GLAD_GL_ARB_texture_compression_rgtc;
int GLAD_GL_HP_convolution_border_modes;
int GLAD_GL_EXT_shader_integer_mix;
int GLAD_GL_SGIX_framezoom;
int GLAD_GL_ARB_stencil_texturing;
int GLAD_GL_ARB_shader_clock;
int GLAD_GL_NV_shader_atomic_fp16_vector;
int GLAD_GL_SGIX_fog_offset;
int GLAD_GL_ARB_draw_elements_base_vertex;
int GLAD_GL_INGR_interlace_read;
int GLAD_GL_NV_transform_feedback;
int GLAD_GL_NV_fragment_program;
int GLAD_GL_AMD_stencil_operation_extended;
int GLAD_GL_ARB_seamless_cubemap_per_texture;
int GLAD_GL_ARB_instanced_arrays;
int GLAD_GL_EXT_polygon_offset;
int GLAD_GL_NV_vertex_array_range2;
int GLAD_GL_KHR_robustness;
int GLAD_GL_AMD_sparse_texture;
int GLAD_GL_ARB_clip_control;
int GLAD_GL_NV_fragment_coverage_to_color;
int GLAD_GL_NV_fence;
int GLAD_GL_ARB_texture_buffer_range;
int GLAD_GL_SUN_mesh_array;
int GLAD_GL_ARB_vertex_attrib_binding;
int GLAD_GL_ARB_framebuffer_no_attachments;
int GLAD_GL_ARB_cl_event;
int GLAD_GL_EXT_vertex_weighting;
int GLAD_GL_ARB_derivative_control;
int GLAD_GL_NV_packed_depth_stencil;
int GLAD_GL_OES_single_precision;
int GLAD_GL_NV_primitive_restart;
int GLAD_GL_SUN_global_alpha;
int GLAD_GL_ARB_fragment_shader_interlock;
int GLAD_GL_EXT_texture_object;
int GLAD_GL_AMD_name_gen_delete;
int GLAD_GL_NV_texture_compression_vtc;
int GLAD_GL_NV_sample_mask_override_coverage;
int GLAD_GL_NV_texture_shader3;
int GLAD_GL_NV_texture_shader2;
int GLAD_GL_ARB_texture_filter_anisotropic;
int GLAD_GL_EXT_texture;
int GLAD_GL_ARB_buffer_storage;
int GLAD_GL_AMD_shader_atomic_counter_ops;
int GLAD_GL_APPLE_vertex_program_evaluators;
int GLAD_GL_AMD_texture_gather_bias_lod;
int GLAD_GL_ARB_explicit_uniform_location;
int GLAD_GL_ARB_depth_buffer_float;
int GLAD_GL_NV_path_rendering_shared_edge;
int GLAD_GL_SGIX_shadow_ambient;
int GLAD_GL_ARB_texture_cube_map;
int GLAD_GL_AMD_vertex_shader_viewport_index;
int GLAD_GL_SGIX_list_priority;
int GLAD_GL_NV_vertex_buffer_unified_memory;
int GLAD_GL_NV_uniform_buffer_unified_memory;
int GLAD_GL_ARB_clear_texture;
int GLAD_GL_ATI_texture_env_combine3;
int GLAD_GL_NV_depth_clamp;
int GLAD_GL_ARB_map_buffer_alignment;
int GLAD_GL_EXT_memory_object;
int GLAD_GL_NV_blend_equation_advanced;
int GLAD_GL_SGIS_sharpen_texture;
int GLAD_GL_KHR_robust_buffer_access_behavior;
int GLAD_GL_ARB_pipeline_statistics_query;
int GLAD_GL_ARB_vertex_program;
int GLAD_GL_ARB_texture_rgb10_a2ui;
int GLAD_GL_OML_interlace;
int GLAD_GL_ATI_pixel_format_float;
int GLAD_GL_NV_clip_space_w_scaling;
int GLAD_GL_ARB_vertex_buffer_object;
int GLAD_GL_EXT_shadow_funcs;
int GLAD_GL_ATI_text_fragment_shader;
int GLAD_GL_NV_vertex_array_range;
int GLAD_GL_SGIX_fragment_lighting;
int GLAD_GL_AMD_shader_ballot;
int GLAD_GL_NV_texture_expand_normal;
int GLAD_GL_NV_framebuffer_multisample_coverage;
int GLAD_GL_EXT_timer_query;
int GLAD_GL_EXT_vertex_array_bgra;
int GLAD_GL_NV_bindless_texture;
int GLAD_GL_KHR_debug;
int GLAD_GL_SGIS_texture_border_clamp;
int GLAD_GL_ATI_vertex_attrib_array_object;
int GLAD_GL_SGIX_clipmap;
int GLAD_GL_EXT_geometry_shader4;
int GLAD_GL_ARB_shader_texture_image_samples;
int GLAD_GL_MESA_ycbcr_texture;
int GLAD_GL_MESAX_texture_stack;
int GLAD_GL_AMD_seamless_cubemap_per_texture;
int GLAD_GL_EXT_bindable_uniform;
int GLAD_GL_KHR_texture_compression_astc_hdr;
int GLAD_GL_ARB_shader_ballot;
int GLAD_GL_KHR_blend_equation_advanced;
int GLAD_GL_ARB_fragment_program_shadow;
int GLAD_GL_ATI_element_array;
int GLAD_GL_AMD_texture_texture4;
int GLAD_GL_SGIX_reference_plane;
int GLAD_GL_EXT_stencil_two_side;
int GLAD_GL_ARB_transform_feedback_overflow_query;
int GLAD_GL_SGIX_texture_lod_bias;
int GLAD_GL_KHR_no_error;
int GLAD_GL_NV_explicit_multisample;
int GLAD_GL_NV_stereo_view_rendering;
int GLAD_GL_IBM_static_data;
int GLAD_GL_EXT_clip_volume_hint;
int GLAD_GL_EXT_texture_perturb_normal;
int GLAD_GL_NV_fragment_program2;
int GLAD_GL_NV_fragment_program4;
int GLAD_GL_EXT_point_parameters;
int GLAD_GL_PGI_misc_hints;
int GLAD_GL_SGIX_subsample;
int GLAD_GL_AMD_shader_stencil_export;
int GLAD_GL_ARB_shader_texture_lod;
int GLAD_GL_ARB_vertex_shader;
int GLAD_GL_ARB_depth_clamp;
int GLAD_GL_SGIS_texture_select;
int GLAD_GL_NV_texture_shader;
int GLAD_GL_ARB_tessellation_shader;
int GLAD_GL_EXT_draw_buffers2;
int GLAD_GL_ARB_vertex_attrib_64bit;
int GLAD_GL_EXT_texture_filter_minmax;
int GLAD_GL_NV_query_resource;
int GLAD_GL_AMD_interleaved_elements;
int GLAD_GL_ARB_fragment_program;
int GLAD_GL_OML_resample;
int GLAD_GL_APPLE_ycbcr_422;
int GLAD_GL_SGIX_texture_add_env;
int GLAD_GL_ARB_shadow_ambient;
int GLAD_GL_ARB_texture_storage;
int GLAD_GL_EXT_pixel_buffer_object;
int GLAD_GL_ARB_copy_image;
int GLAD_GL_SGIS_pixel_texture;
int GLAD_GL_SGIS_generate_mipmap;
int GLAD_GL_SGIX_instruments;
int GLAD_GL_ARB_fragment_layer_viewport;
int GLAD_GL_ARB_shader_storage_buffer_object;
int GLAD_GL_EXT_sparse_texture2;
int GLAD_GL_EXT_blend_minmax;
int GLAD_GL_MESA_pack_invert;
int GLAD_GL_ARB_base_instance;
int GLAD_GL_SGIX_convolution_accuracy;
int GLAD_GL_PGI_vertex_hints;
int GLAD_GL_AMD_transform_feedback4;
int GLAD_GL_ARB_ES3_1_compatibility;
int GLAD_GL_EXT_memory_object_win32;
int GLAD_GL_EXT_texture_integer;
int GLAD_GL_ARB_texture_multisample;
int GLAD_GL_ATI_vertex_streams;
int GLAD_GL_AMD_gpu_shader_int64;
int GLAD_GL_S3_s3tc;
int GLAD_GL_ARB_query_buffer_object;
int GLAD_GL_AMD_vertex_shader_tessellator;
int GLAD_GL_ARB_invalidate_subdata;
int GLAD_GL_NV_draw_vulkan_image;
int GLAD_GL_EXT_index_material;
int GLAD_GL_NVX_linked_gpu_multicast;
int GLAD_GL_NV_blend_equation_advanced_coherent;
int GLAD_GL_KHR_texture_compression_astc_sliced_3d;
int GLAD_GL_INTEL_parallel_arrays;
int GLAD_GL_ATI_draw_buffers;
int GLAD_GL_WIN_specular_fog;
int GLAD_GL_EXT_cmyka;
int GLAD_GL_SGIX_pixel_texture;
int GLAD_GL_APPLE_specular_vector;
int GLAD_GL_ARB_compatibility;
int GLAD_GL_ARB_timer_query;
int GLAD_GL_SGIX_interlace;
int GLAD_GL_NV_parameter_buffer_object;
int GLAD_GL_AMD_shader_trinary_minmax;
int GLAD_GL_ARB_direct_state_access;
int GLAD_GL_EXT_rescale_normal;
int GLAD_GL_ARB_pixel_buffer_object;
int GLAD_GL_ARB_uniform_buffer_object;
int GLAD_GL_ARB_vertex_type_10f_11f_11f_rev;
int GLAD_GL_ARB_texture_swizzle;
int GLAD_GL_NV_transform_feedback2;
int GLAD_GL_SGIX_async_pixel;
int GLAD_GL_NV_fragment_program_option;
int GLAD_GL_ARB_explicit_attrib_location;
int GLAD_GL_EXT_blend_color;
int GLAD_GL_NV_shader_thread_group;
int GLAD_GL_EXT_stencil_wrap;
int GLAD_GL_EXT_index_array_formats;
int GLAD_GL_OVR_multiview2;
int GLAD_GL_EXT_histogram;
int GLAD_GL_ARB_get_texture_sub_image;
int GLAD_GL_SGIS_point_parameters;
int GLAD_GL_SGIX_ycrcb;
int GLAD_GL_EXT_direct_state_access;
int GLAD_GL_ARB_cull_distance;
int GLAD_GL_AMD_sample_positions;
int GLAD_GL_NV_vertex_program;
int GLAD_GL_NV_shader_thread_shuffle;
int GLAD_GL_ARB_shader_precision;
int GLAD_GL_EXT_vertex_shader;
int GLAD_GL_EXT_blend_func_separate;
int GLAD_GL_APPLE_fence;
int GLAD_GL_NV_query_resource_tag;
int GLAD_GL_OES_byte_coordinates;
int GLAD_GL_ARB_transpose_matrix;
int GLAD_GL_ARB_provoking_vertex;
int GLAD_GL_EXT_fog_coord;
int GLAD_GL_EXT_vertex_array;
int GLAD_GL_ARB_half_float_vertex;
int GLAD_GL_EXT_blend_equation_separate;
int GLAD_GL_NV_framebuffer_mixed_samples;
int GLAD_GL_NVX_conditional_render;
int GLAD_GL_ARB_multi_draw_indirect;
int GLAD_GL_EXT_raster_multisample;
int GLAD_GL_NV_copy_image;
int GLAD_GL_HP_texture_lighting;
int GLAD_GL_INTEL_framebuffer_CMAA;
int GLAD_GL_ARB_transform_feedback2;
int GLAD_GL_ARB_transform_feedback3;
int GLAD_GL_SGIX_ycrcba;
int GLAD_GL_EXT_debug_marker;
int GLAD_GL_EXT_bgra;
int GLAD_GL_ARB_sparse_texture_clamp;
int GLAD_GL_EXT_pixel_transform;
int GLAD_GL_ARB_conservative_depth;
int GLAD_GL_ATI_fragment_shader;
int GLAD_GL_ARB_vertex_array_object;
int GLAD_GL_SUN_triangle_list;
int GLAD_GL_EXT_texture_env_add;
int GLAD_GL_EXT_packed_depth_stencil;
int GLAD_GL_EXT_texture_mirror_clamp;
int GLAD_GL_NV_multisample_filter_hint;
int GLAD_GL_APPLE_float_pixels;
int GLAD_GL_ARB_transform_feedback_instanced;
int GLAD_GL_SGIX_async;
int GLAD_GL_EXT_texture_compression_latc;
int GLAD_GL_NV_robustness_video_memory_purge;
int GLAD_GL_ARB_shading_language_100;
int GLAD_GL_INTEL_performance_query;
int GLAD_GL_ARB_texture_mirror_clamp_to_edge;
int GLAD_GL_NV_gpu_shader5;
int GLAD_GL_NV_bindless_multi_draw_indirect_count;
int GLAD_GL_ARB_ES2_compatibility;
int GLAD_GL_ARB_indirect_parameters;
int GLAD_GL_EXT_window_rectangles;
int GLAD_GL_NV_half_float;
int GLAD_GL_ARB_ES3_2_compatibility;
int GLAD_GL_ATI_texture_mirror_once;
int GLAD_GL_IBM_rasterpos_clip;
int GLAD_GL_EXT_semaphore;
int GLAD_GL_SGIX_shadow;
int GLAD_GL_EXT_polygon_offset_clamp;
int GLAD_GL_NV_deep_texture3D;
int GLAD_GL_ARB_shader_draw_parameters;
int GLAD_GL_SGIX_calligraphic_fragment;
int GLAD_GL_ARB_shader_bit_encoding;
int GLAD_GL_EXT_compiled_vertex_array;
int GLAD_GL_NV_depth_buffer_float;
int GLAD_GL_NV_occlusion_query;
int GLAD_GL_APPLE_flush_buffer_range;
int GLAD_GL_ARB_imaging;
int GLAD_GL_NV_shader_atomic_float;
int GLAD_GL_ARB_draw_buffers_blend;
int GLAD_GL_AMD_gcn_shader;
int GLAD_GL_AMD_blend_minmax_factor;
int GLAD_GL_EXT_texture_sRGB_decode;
int GLAD_GL_ARB_shading_language_420pack;
int GLAD_GL_ARB_shader_viewport_layer_array;
int GLAD_GL_ATI_meminfo;
int GLAD_GL_EXT_abgr;
int GLAD_GL_AMD_pinned_memory;
int GLAD_GL_EXT_texture_snorm;
int GLAD_GL_SGIX_texture_coordinate_clamp;
int GLAD_GL_ARB_clear_buffer_object;
int GLAD_GL_ARB_multisample;
int GLAD_GL_EXT_debug_label;
int GLAD_GL_ARB_sample_shading;
int GLAD_GL_NV_internalformat_sample_query;
int GLAD_GL_INTEL_map_texture;
int GLAD_GL_ARB_texture_env_crossbar;
int GLAD_GL_EXT_422_pixels;
int GLAD_GL_NV_blend_minmax_factor;
int GLAD_GL_NV_conservative_raster_pre_snap_triangles;
int GLAD_GL_ARB_compute_shader;
int GLAD_GL_EXT_blend_logic_op;
int GLAD_GL_ARB_blend_func_extended;
int GLAD_GL_IBM_vertex_array_lists;
int GLAD_GL_ARB_color_buffer_float;
int GLAD_GL_ARB_bindless_texture;
int GLAD_GL_ARB_window_pos;
int GLAD_GL_ARB_internalformat_query;
int GLAD_GL_ARB_shadow;
int GLAD_GL_ARB_texture_mirrored_repeat;
int GLAD_GL_EXT_shader_image_load_store;
int GLAD_GL_EXT_copy_texture;
int GLAD_GL_NV_register_combiners2;
int GLAD_GL_SGIX_ycrcb_subsample;
int GLAD_GL_NV_alpha_to_coverage_dither_control;
int GLAD_GL_SGIX_ir_instrument1;
int GLAD_GL_NV_draw_texture;
int GLAD_GL_EXT_texture_shared_exponent;
int GLAD_GL_EXT_draw_instanced;
int GLAD_GL_NV_copy_depth_to_color;
int GLAD_GL_ARB_viewport_array;
int GLAD_GL_ARB_separate_shader_objects;
int GLAD_GL_EXT_depth_bounds_test;
int GLAD_GL_HP_image_transform;
int GLAD_GL_ARB_texture_env_add;
int GLAD_GL_NV_video_capture;
int GLAD_GL_ARB_sampler_objects;
int GLAD_GL_ARB_matrix_palette;
int GLAD_GL_SGIS_texture_color_mask;
int GLAD_GL_EXT_packed_pixels;
int GLAD_GL_EXT_coordinate_frame;
int GLAD_GL_ARB_texture_compression;
int GLAD_GL_ARB_multi_bind;
int GLAD_GL_APPLE_aux_depth_stencil;
int GLAD_GL_ARB_shader_subroutine;
int GLAD_GL_EXT_framebuffer_sRGB;
int GLAD_GL_ARB_texture_storage_multisample;
int GLAD_GL_KHR_blend_equation_advanced_coherent;
int GLAD_GL_EXT_vertex_attrib_64bit;
int GLAD_GL_NV_shader_atomic_float64;
int GLAD_GL_ARB_depth_texture;
int GLAD_GL_NV_shader_buffer_store;
int GLAD_GL_OES_query_matrix;
int GLAD_GL_MESA_window_pos;
int GLAD_GL_NV_fill_rectangle;
int GLAD_GL_NV_shader_storage_buffer_object;
int GLAD_GL_ARB_texture_query_lod;
int GLAD_GL_ARB_copy_buffer;
int GLAD_GL_ARB_shader_image_size;
int GLAD_GL_NV_shader_atomic_counters;
int GLAD_GL_APPLE_object_purgeable;
int GLAD_GL_ARB_occlusion_query;
int GLAD_GL_INGR_color_clamp;
int GLAD_GL_SGI_color_table;
int GLAD_GL_NV_gpu_program5_mem_extended;
int GLAD_GL_ARB_texture_cube_map_array;
int GLAD_GL_SGIX_scalebias_hint;
int GLAD_GL_EXT_gpu_shader4;
int GLAD_GL_NV_geometry_program4;
int GLAD_GL_EXT_framebuffer_multisample_blit_scaled;
int GLAD_GL_AMD_debug_output;
int GLAD_GL_ARB_texture_border_clamp;
int GLAD_GL_EXT_win32_keyed_mutex;
int GLAD_GL_ARB_fragment_coord_conventions;
int GLAD_GL_ARB_multitexture;
int GLAD_GL_SGIX_polynomial_ffd;
int GLAD_GL_EXT_texture_env_dot3;
int GLAD_GL_EXT_provoking_vertex;
int GLAD_GL_ARB_point_parameters;
int GLAD_GL_ARB_shader_image_load_store;
int GLAD_GL_ARB_conditional_render_inverted;
int GLAD_GL_HP_occlusion_test;
int GLAD_GL_ARB_ES3_compatibility;
int GLAD_GL_ARB_texture_barrier;
int GLAD_GL_ARB_texture_buffer_object_rgb32;
int GLAD_GL_NV_bindless_multi_draw_indirect;
int GLAD_GL_SGIX_texture_multi_buffer;
int GLAD_GL_AMD_shader_image_load_store_lod;
int GLAD_GL_KHR_texture_compression_astc_ldr;
int GLAD_GL_3DFX_multisample;
int GLAD_GL_INTEL_fragment_shader_ordering;
int GLAD_GL_ARB_texture_env_dot3;
int GLAD_GL_NV_gpu_program4;
int GLAD_GL_NV_gpu_program5;
int GLAD_GL_NV_float_buffer;
int GLAD_GL_SGIS_texture_edge_clamp;
int GLAD_GL_ARB_framebuffer_sRGB;
int GLAD_GL_SUN_slice_accum;
int GLAD_GL_EXT_index_texture;
int GLAD_GL_EXT_shader_image_load_formatted;
int GLAD_GL_ARB_geometry_shader4;
int GLAD_GL_EXT_separate_specular_color;
int GLAD_GL_AMD_depth_clamp_separate;
int GLAD_GL_NV_conservative_raster;
int GLAD_GL_ARB_sparse_texture2;
int GLAD_GL_SGIX_sprite;
int GLAD_GL_ARB_get_program_binary;
int GLAD_GL_AMD_occlusion_query_event;
int GLAD_GL_SGIS_multisample;
int GLAD_GL_EXT_framebuffer_object;
int GLAD_GL_ARB_robustness_isolation;
int GLAD_GL_ARB_vertex_array_bgra;
int GLAD_GL_APPLE_vertex_array_range;
int GLAD_GL_AMD_query_buffer_object;
int GLAD_GL_NV_register_combiners;
int GLAD_GL_ARB_draw_buffers;
int GLAD_GL_NVX_blend_equation_advanced_multi_draw_buffers;
int GLAD_GL_AMD_gpu_shader_int16;
int GLAD_GL_ARB_debug_output;
int GLAD_GL_SGI_color_matrix;
int GLAD_GL_EXT_cull_vertex;
int GLAD_GL_EXT_texture_sRGB;
int GLAD_GL_APPLE_row_bytes;
int GLAD_GL_NV_texgen_reflection;
int GLAD_GL_IBM_multimode_draw_arrays;
int GLAD_GL_KHR_parallel_shader_compile;
int GLAD_GL_APPLE_vertex_array_object;
int GLAD_GL_3DFX_texture_compression_FXT1;
int GLAD_GL_NV_fragment_shader_interlock;
int GLAD_GL_AMD_conservative_depth;
int GLAD_GL_ARB_texture_float;
int GLAD_GL_ARB_compressed_texture_pixel_storage;
int GLAD_GL_SGIS_detail_texture;
int GLAD_GL_NV_geometry_shader_passthrough;
int GLAD_GL_ARB_draw_instanced;
int GLAD_GL_OES_read_format;
int GLAD_GL_ATI_texture_float;
int GLAD_GL_ARB_texture_gather;
int GLAD_GL_AMD_vertex_shader_layer;
int GLAD_GL_ARB_shading_language_include;
int GLAD_GL_APPLE_client_storage;
int GLAD_GL_WIN_phong_shading;
int GLAD_GL_INGR_blend_func_separate;
int GLAD_GL_NV_path_rendering;
int GLAD_GL_NV_conservative_raster_dilate;
int GLAD_GL_AMD_gpu_shader_half_float;
int GLAD_GL_ARB_post_depth_coverage;
int GLAD_GL_ARB_texture_non_power_of_two;
int GLAD_GL_APPLE_rgb_422;
int GLAD_GL_EXT_texture_lod_bias;
int GLAD_GL_ARB_gpu_shader_int64;
int GLAD_GL_ARB_seamless_cube_map;
int GLAD_GL_ARB_shader_group_vote;
int GLAD_GL_NV_vdpau_interop;
int GLAD_GL_ARB_occlusion_query2;
int GLAD_GL_ARB_internalformat_query2;
int GLAD_GL_EXT_texture_filter_anisotropic;
int GLAD_GL_SUN_vertex;
int GLAD_GL_EXT_transform_feedback;
int GLAD_GL_SGIX_igloo_interface;
int GLAD_GL_SGIS_texture_lod;
int GLAD_GL_NV_vertex_program3;
int GLAD_GL_ARB_draw_indirect;
int GLAD_GL_NV_vertex_program4;
int GLAD_GL_AMD_transform_feedback3_lines_triangles;
int GLAD_GL_SGIS_fog_function;
int GLAD_GL_EXT_x11_sync_object;
int GLAD_GL_ARB_sync;
int GLAD_GL_NV_texture_rectangle_compressed;
int GLAD_GL_NV_sample_locations;
int GLAD_GL_NV_gpu_multicast;
int GLAD_GL_ARB_gl_spirv;
int GLAD_GL_ARB_compute_variable_group_size;
int GLAD_GL_OES_fixed_point;
int GLAD_GL_NV_blend_square;
int GLAD_GL_EXT_framebuffer_multisample;
int GLAD_GL_ARB_gpu_shader5;
int GLAD_GL_SGIS_texture4D;
int GLAD_GL_EXT_texture3D;
int GLAD_GL_EXT_multisample;
int GLAD_GL_EXT_secondary_color;
int GLAD_GL_INTEL_conservative_rasterization;
int GLAD_GL_ARB_texture_filter_minmax;
int GLAD_GL_ATI_vertex_array_object;
int GLAD_GL_ARB_parallel_shader_compile;
int GLAD_GL_NVX_gpu_memory_info;
int GLAD_GL_ARB_sparse_texture;
int GLAD_GL_SGIS_point_line_texgen;
int GLAD_GL_ARB_sample_locations;
int GLAD_GL_ARB_sparse_buffer;
int GLAD_GL_ARB_polygon_offset_clamp;
int GLAD_GL_EXT_draw_range_elements;
int GLAD_GL_SGIX_blend_alpha_minmax;
int GLAD_GL_KHR_context_flush_control;
void APIENTRY glad_debug_impl_glEvaluateDepthValuesARB(void);
void APIENTRY glad_debug_impl_glBeginFragmentShaderATI(void);
void APIENTRY glad_debug_impl_glEndFragmentShaderATI(void);
void APIENTRY glad_debug_impl_glUnlockArraysEXT(void);
void APIENTRY glad_debug_impl_glPopGroupMarkerEXT(void);
void APIENTRY glad_debug_impl_glEndTransformFeedbackEXT(void);
void APIENTRY glad_debug_impl_glBeginVertexShaderEXT(void);
void APIENTRY glad_debug_impl_glEndVertexShaderEXT(void);
void APIENTRY glad_debug_impl_glFrameTerminatorGREMEDY(void);
void APIENTRY glad_debug_impl_glApplyFramebufferAttachmentCMAAINTEL(void);
void APIENTRY glad_debug_impl_glBlendBarrierKHR(void);
void APIENTRY glad_debug_impl_glPopDebugGroupKHR(void);
void APIENTRY glad_debug_impl_glResizeBuffersMESA(void);
void APIENTRY glad_debug_impl_glEndConditionalRenderNVX(void);
void APIENTRY glad_debug_impl_glLGPUInterlockNVX(void);
void APIENTRY glad_debug_impl_glBlendBarrierNV(void);
void APIENTRY glad_debug_impl_glEndConditionalRenderNV(void);
void APIENTRY glad_debug_impl_glMulticastBarrierNV(void);
void APIENTRY glad_debug_impl_glEndOcclusionQueryNV(void);
void APIENTRY glad_debug_impl_glPrimitiveRestartNV(void);
void APIENTRY glad_debug_impl_glResolveDepthValuesNV(void);
void APIENTRY glad_debug_impl_glTextureBarrierNV(void);
void APIENTRY glad_debug_impl_glEndTransformFeedbackNV(void);
void APIENTRY glad_debug_impl_glPauseTransformFeedbackNV(void);
void APIENTRY glad_debug_impl_glResumeTransformFeedbackNV(void);
void APIENTRY glad_debug_impl_glVDPAUInitNV(const void *arg0, const void *arg1);
void APIENTRY glad_debug_impl_glVDPAUFiniNV(void);
void APIENTRY glad_debug_impl_glFlushVertexArrayRangeNV(void);
void APIENTRY glad_debug_impl_glFlushRasterSGIX(void);
void APIENTRY glad_debug_impl_glStartInstrumentsSGIX(void);
void APIENTRY glad_debug_impl_glTagSampleBufferSGIX(void);
void APIENTRY glad_debug_impl_glFinishTextureSUNX(void);
/* view.c */
cvar_t lcd_x;
cvar_t lcd_yaw;
cvar_t scr_ofsx;
cvar_t scr_ofsy;
cvar_t scr_ofsz;
cvar_t cl_rollspeed;
cvar_t cl_rollangle;
cvar_t cl_bob;
cvar_t cl_bobcycle;
cvar_t cl_bobup;
cvar_t v_kicktime;
cvar_t v_kickroll;
cvar_t v_kickpitch;
cvar_t v_iyaw_cycle;
cvar_t v_iroll_cycle;
cvar_t v_ipitch_cycle;
cvar_t v_iyaw_level;
cvar_t v_iroll_level;
cvar_t v_ipitch_level;
cvar_t v_idlescale;
cvar_t crosshair;
cvar_t cl_crossx;
cvar_t cl_crossy;
cvar_t gl_cshiftpercent;
float v_dmg_time;
float v_dmg_roll;
float v_dmg_pitch;
vec3_t forward;
vec3_t right;
vec3_t up;
float V_CalcRoll(vec3_t angles, vec3_t velocity);
float V_CalcBob(void);
cvar_t v_centermove;
cvar_t v_centerspeed;
void V_StartPitchDrift(void);
void V_StopPitchDrift(void);
void V_DriftPitch(void);
cshift_t cshift_empty;
cshift_t cshift_water;
cshift_t cshift_slime;
cshift_t cshift_lava;
cvar_t v_gamma;
byte gammatable[256];
byte ramps[3][256];
float v_blend[4];
void BuildGammaTable(float g);
qboolean V_CheckGamma(void);
void V_ParseDamage(void);
void V_cshift_f(void);
void V_BonusFlash_f(void);
void V_SetContentsColor(int contents);
void V_CalcPowerupCshift(void);
void V_CalcBlend(void);
void V_UpdatePalette(void);
void V_UpdatePalette(void);
float angledelta(float a);
void CalcGunAngle(void);
void V_BoundOffsets(void);
void V_AddIdle(void);
void V_CalcViewRoll(void);
void V_CalcIntermissionRefdef(void);
void V_CalcRefdef(void);
void V_RenderView(void);
void V_Init(void);
/* wad.c */
int wad_numlumps;
lumpinfo_t *wad_lumps;
byte *wad_base;
void W_CleanupName(char *in, char *out);
void W_LoadWadFile(char *filename);
lumpinfo_t *W_GetLumpinfo(char *name);
void *W_GetLumpName(char *name);
void *W_GetLumpNum(int num);
void SwapPic(qpic_t *pic);
/* world.c */
void SV_InitBoxHull(void);
hull_t *SV_HullForBox(vec3_t mins, vec3_t maxs);
hull_t *SV_HullForEntity(edict_t *ent, vec3_t mins, vec3_t maxs, vec3_t offset);
areanode_t *SV_CreateAreaNode(int depth, vec3_t mins, vec3_t maxs);
void SV_ClearWorld(void);
void SV_UnlinkEdict(edict_t *ent);
void SV_TouchLinks(edict_t *ent, areanode_t *node);
void SV_FindTouchedLeafs(edict_t *ent, mnode_t *node);
void SV_LinkEdict(edict_t *ent, qboolean touch_triggers);
int SV_HullPointContents(hull_t *hull, int num, vec3_t p);
int SV_PointContents(vec3_t p);
int SV_TruePointContents(vec3_t p);
edict_t *SV_TestEntityPosition(edict_t *ent);
qboolean SV_RecursiveHullCheck(hull_t *hull, int num, float p1f, float p2f, vec3_t p1, vec3_t p2, trace_t *trace);
trace_t SV_ClipMoveToEntity(edict_t *ent, vec3_t start, vec3_t mins, vec3_t maxs, vec3_t end);
void SV_ClipToLinks(areanode_t *node, moveclip_t *clip);
void SV_MoveBounds(vec3_t start, vec3_t mins, vec3_t maxs, vec3_t end, vec3_t boxmins, vec3_t boxmaxs);
trace_t SV_Move(vec3_t start, vec3_t mins, vec3_t maxs, vec3_t end, int type, edict_t *passedict);
/* zone.c */
memzone_t *mainzone;
void Z_ClearZone(memzone_t *zone, int size);
void Z_Free(void *ptr);
void *Z_Malloc(int size);
void *Z_TagMalloc(int size, int tag);
void Z_Print(memzone_t *zone);
void Z_CheckHeap(void);
byte *hunk_base;
int hunk_size;
int hunk_low_used;
int hunk_high_used;
qboolean hunk_tempactive;
int hunk_tempmark;
void Hunk_Check(void);
void Hunk_Print(qboolean all);
void *Hunk_AllocName(int size, char *name);
void *Hunk_Alloc(int size);
int Hunk_LowMark(void);
void Hunk_FreeToLowMark(int mark);
int Hunk_HighMark(void);
void Hunk_FreeToHighMark(int mark);
void *Hunk_HighAllocName(int size, char *name);
void *Hunk_TempAlloc(int size);
cache_system_t cache_head;
void Cache_Move(cache_system_t *c);
void Cache_FreeLow(int new_low_hunk);
void Cache_FreeHigh(int new_high_hunk);
void Cache_UnlinkLRU(cache_system_t *cs);
void Cache_MakeLRU(cache_system_t *cs);
cache_system_t *Cache_TryAlloc(int size, qboolean nobottom);
void Cache_Flush(void);
void Cache_Print(void);
void Cache_Report(void);
void Cache_Compact(void);
void Cache_Init(void);
void Cache_Free(cache_user_t *c);
void *Cache_Check(cache_user_t *c);
void *Cache_Alloc(cache_user_t *c, int size, char *name);
void Memory_Init(void *buf, int size);
